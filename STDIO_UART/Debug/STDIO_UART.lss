
STDIO_UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002274  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000068  20000000  00002274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000100  20000068  000022dc  00020068  2**2
                  ALLOC
  3 .stack        00002000  20000168  000023dc  00020068  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002154c  00000000  00000000  000200e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003159  00000000  00000000  00041635  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004071  00000000  00000000  0004478e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000418  00000000  00000000  000487ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000490  00000000  00000000  00048c17  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a451  00000000  00000000  000490a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000a1f1  00000000  00000000  000634f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008d132  00000000  00000000  0006d6e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000fdc  00000000  00000000  000fa81c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	68 21 00 20 49 12 00 00 45 12 00 00 45 12 00 00     h!. I...E...E...
	...
      2c:	45 12 00 00 00 00 00 00 00 00 00 00 45 12 00 00     E...........E...
      3c:	45 12 00 00 45 12 00 00 45 12 00 00 45 12 00 00     E...E...E...E...
      4c:	45 12 00 00 45 12 00 00 45 12 00 00 45 12 00 00     E...E...E...E...
      5c:	45 12 00 00 45 12 00 00 7d 0b 00 00 8d 0b 00 00     E...E...}.......
      6c:	9d 0b 00 00 ad 0b 00 00 bd 0b 00 00 cd 0b 00 00     ................
      7c:	45 12 00 00 45 12 00 00 45 12 00 00 45 12 00 00     E...E...E...E...
      8c:	45 12 00 00 45 12 00 00 45 12 00 00 45 12 00 00     E...E...E...E...
      9c:	45 12 00 00 45 12 00 00 45 12 00 00 45 12 00 00     E...E...E...E...
      ac:	45 12 00 00 00 00 00 00                             E.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000068 	.word	0x20000068
      d4:	00000000 	.word	0x00000000
      d8:	00002274 	.word	0x00002274

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	2000006c 	.word	0x2000006c
     108:	00002274 	.word	0x00002274
     10c:	00002274 	.word	0x00002274
     110:	00000000 	.word	0x00000000

00000114 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     114:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     116:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     118:	2340      	movs	r3, #64	; 0x40
     11a:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     11c:	4281      	cmp	r1, r0
     11e:	d202      	bcs.n	126 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     120:	0018      	movs	r0, r3
     122:	bd10      	pop	{r4, pc}
		baud_calculated++;
     124:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     126:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     128:	1c63      	adds	r3, r4, #1
     12a:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     12c:	4288      	cmp	r0, r1
     12e:	d9f9      	bls.n	124 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     130:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     132:	2cff      	cmp	r4, #255	; 0xff
     134:	d8f4      	bhi.n	120 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     136:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     138:	2300      	movs	r3, #0
     13a:	e7f1      	b.n	120 <_sercom_get_sync_baud_val+0xc>

0000013c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     13c:	b5f0      	push	{r4, r5, r6, r7, lr}
     13e:	46de      	mov	lr, fp
     140:	4657      	mov	r7, sl
     142:	464e      	mov	r6, r9
     144:	4645      	mov	r5, r8
     146:	b5e0      	push	{r5, r6, r7, lr}
     148:	b089      	sub	sp, #36	; 0x24
     14a:	000c      	movs	r4, r1
     14c:	9205      	str	r2, [sp, #20]
     14e:	aa12      	add	r2, sp, #72	; 0x48
     150:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1, temp2;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     152:	0005      	movs	r5, r0
     154:	434d      	muls	r5, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     156:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     158:	42a5      	cmp	r5, r4
     15a:	d907      	bls.n	16c <_sercom_get_async_baud_val+0x30>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     15c:	0010      	movs	r0, r2
     15e:	b009      	add	sp, #36	; 0x24
     160:	bc3c      	pop	{r2, r3, r4, r5}
     162:	4690      	mov	r8, r2
     164:	4699      	mov	r9, r3
     166:	46a2      	mov	sl, r4
     168:	46ab      	mov	fp, r5
     16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     16c:	2b00      	cmp	r3, #0
     16e:	d155      	bne.n	21c <_sercom_get_async_baud_val+0xe0>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     170:	0002      	movs	r2, r0
     172:	0008      	movs	r0, r1
     174:	2100      	movs	r1, #0
     176:	4d63      	ldr	r5, [pc, #396]	; (304 <_sercom_get_async_baud_val+0x1c8>)
     178:	47a8      	blx	r5
     17a:	4683      	mov	fp, r0
		ratio = long_division(temp1, peripheral_clock);
     17c:	0026      	movs	r6, r4
     17e:	2700      	movs	r7, #0
	uint64_t q = 0, r = 0, bit_shift;
     180:	2300      	movs	r3, #0
     182:	2400      	movs	r4, #0
     184:	9300      	str	r3, [sp, #0]
     186:	9401      	str	r4, [sp, #4]
     188:	2200      	movs	r2, #0
     18a:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     18c:	203f      	movs	r0, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     18e:	2120      	movs	r1, #32
     190:	468c      	mov	ip, r1
     192:	391f      	subs	r1, #31
     194:	9602      	str	r6, [sp, #8]
     196:	9703      	str	r7, [sp, #12]
     198:	e014      	b.n	1c4 <_sercom_get_async_baud_val+0x88>
     19a:	4664      	mov	r4, ip
     19c:	1a24      	subs	r4, r4, r0
     19e:	000d      	movs	r5, r1
     1a0:	40e5      	lsrs	r5, r4
     1a2:	46a8      	mov	r8, r5
     1a4:	e015      	b.n	1d2 <_sercom_get_async_baud_val+0x96>
			r = r - d;
     1a6:	9c02      	ldr	r4, [sp, #8]
     1a8:	9d03      	ldr	r5, [sp, #12]
     1aa:	1b12      	subs	r2, r2, r4
     1ac:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     1ae:	464d      	mov	r5, r9
     1b0:	9e00      	ldr	r6, [sp, #0]
     1b2:	9f01      	ldr	r7, [sp, #4]
     1b4:	4335      	orrs	r5, r6
     1b6:	003c      	movs	r4, r7
     1b8:	4646      	mov	r6, r8
     1ba:	4334      	orrs	r4, r6
     1bc:	9500      	str	r5, [sp, #0]
     1be:	9401      	str	r4, [sp, #4]
	for (i = 63; i >= 0; i--) {
     1c0:	3801      	subs	r0, #1
     1c2:	d31d      	bcc.n	200 <_sercom_get_async_baud_val+0xc4>
		bit_shift = (uint64_t)1 << i;
     1c4:	2420      	movs	r4, #32
     1c6:	4264      	negs	r4, r4
     1c8:	1904      	adds	r4, r0, r4
     1ca:	d4e6      	bmi.n	19a <_sercom_get_async_baud_val+0x5e>
     1cc:	000d      	movs	r5, r1
     1ce:	40a5      	lsls	r5, r4
     1d0:	46a8      	mov	r8, r5
     1d2:	000c      	movs	r4, r1
     1d4:	4084      	lsls	r4, r0
     1d6:	46a1      	mov	r9, r4
		r = r << 1;
     1d8:	1892      	adds	r2, r2, r2
     1da:	415b      	adcs	r3, r3
     1dc:	0014      	movs	r4, r2
     1de:	001d      	movs	r5, r3
		if (n & bit_shift) {
     1e0:	4646      	mov	r6, r8
     1e2:	465f      	mov	r7, fp
     1e4:	423e      	tst	r6, r7
     1e6:	d003      	beq.n	1f0 <_sercom_get_async_baud_val+0xb4>
			r |= 0x01;
     1e8:	000e      	movs	r6, r1
     1ea:	4326      	orrs	r6, r4
     1ec:	0032      	movs	r2, r6
     1ee:	002b      	movs	r3, r5
		if (r >= d) {
     1f0:	9c02      	ldr	r4, [sp, #8]
     1f2:	9d03      	ldr	r5, [sp, #12]
     1f4:	429d      	cmp	r5, r3
     1f6:	d8e3      	bhi.n	1c0 <_sercom_get_async_baud_val+0x84>
     1f8:	d1d5      	bne.n	1a6 <_sercom_get_async_baud_val+0x6a>
     1fa:	4294      	cmp	r4, r2
     1fc:	d8e0      	bhi.n	1c0 <_sercom_get_async_baud_val+0x84>
     1fe:	e7d2      	b.n	1a6 <_sercom_get_async_baud_val+0x6a>
		scale = ((uint64_t)1 << SHIFT) - ratio;
     200:	2200      	movs	r2, #0
     202:	2301      	movs	r3, #1
     204:	9800      	ldr	r0, [sp, #0]
     206:	9901      	ldr	r1, [sp, #4]
     208:	1a12      	subs	r2, r2, r0
     20a:	418b      	sbcs	r3, r1
     20c:	0019      	movs	r1, r3
		baud_calculated = (65536 * scale) >> SHIFT;
     20e:	0c13      	lsrs	r3, r2, #16
     210:	040a      	lsls	r2, r1, #16
     212:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     214:	9b05      	ldr	r3, [sp, #20]
     216:	801a      	strh	r2, [r3, #0]
	return STATUS_OK;
     218:	2200      	movs	r2, #0
     21a:	e79f      	b.n	15c <_sercom_get_async_baud_val+0x20>
	uint64_t baud_calculated = 0;
     21c:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     21e:	2b01      	cmp	r3, #1
     220:	d1f8      	bne.n	214 <_sercom_get_async_baud_val+0xd8>
			temp1 = BAUD_FP_MAX * (uint64_t)peripheral_clock;
     222:	0f63      	lsrs	r3, r4, #29
     224:	9304      	str	r3, [sp, #16]
     226:	00e3      	lsls	r3, r4, #3
     228:	4698      	mov	r8, r3
			temp2 = ((uint64_t)baudrate * sample_num);
     22a:	000a      	movs	r2, r1
     22c:	2300      	movs	r3, #0
     22e:	2100      	movs	r1, #0
     230:	4c34      	ldr	r4, [pc, #208]	; (304 <_sercom_get_async_baud_val+0x1c8>)
     232:	47a0      	blx	r4
     234:	0004      	movs	r4, r0
     236:	000d      	movs	r5, r1
     238:	2300      	movs	r3, #0
     23a:	469c      	mov	ip, r3
     23c:	9306      	str	r3, [sp, #24]
		bit_shift = (uint64_t)1 << i;
     23e:	3320      	adds	r3, #32
     240:	469b      	mov	fp, r3
     242:	2601      	movs	r6, #1
			if(baud_int < BAUD_INT_MAX) {
     244:	4663      	mov	r3, ip
     246:	9307      	str	r3, [sp, #28]
     248:	e048      	b.n	2dc <_sercom_get_async_baud_val+0x1a0>
		bit_shift = (uint64_t)1 << i;
     24a:	4659      	mov	r1, fp
     24c:	1bc9      	subs	r1, r1, r7
     24e:	0030      	movs	r0, r6
     250:	40c8      	lsrs	r0, r1
     252:	4682      	mov	sl, r0
     254:	e010      	b.n	278 <_sercom_get_async_baud_val+0x13c>
			r = r - d;
     256:	9800      	ldr	r0, [sp, #0]
     258:	9901      	ldr	r1, [sp, #4]
     25a:	1a12      	subs	r2, r2, r0
     25c:	418b      	sbcs	r3, r1
			q |= bit_shift;
     25e:	9902      	ldr	r1, [sp, #8]
     260:	4648      	mov	r0, r9
     262:	4301      	orrs	r1, r0
     264:	9102      	str	r1, [sp, #8]
	for (i = 63; i >= 0; i--) {
     266:	3f01      	subs	r7, #1
     268:	d325      	bcc.n	2b6 <_sercom_get_async_baud_val+0x17a>
		bit_shift = (uint64_t)1 << i;
     26a:	2120      	movs	r1, #32
     26c:	4249      	negs	r1, r1
     26e:	1879      	adds	r1, r7, r1
     270:	d4eb      	bmi.n	24a <_sercom_get_async_baud_val+0x10e>
     272:	0030      	movs	r0, r6
     274:	4088      	lsls	r0, r1
     276:	4682      	mov	sl, r0
     278:	0031      	movs	r1, r6
     27a:	40b9      	lsls	r1, r7
     27c:	4689      	mov	r9, r1
		r = r << 1;
     27e:	1892      	adds	r2, r2, r2
     280:	415b      	adcs	r3, r3
     282:	0010      	movs	r0, r2
     284:	0019      	movs	r1, r3
		if (n & bit_shift) {
     286:	4644      	mov	r4, r8
     288:	464d      	mov	r5, r9
     28a:	402c      	ands	r4, r5
     28c:	46a4      	mov	ip, r4
     28e:	4654      	mov	r4, sl
     290:	9d04      	ldr	r5, [sp, #16]
     292:	402c      	ands	r4, r5
     294:	46a2      	mov	sl, r4
     296:	4664      	mov	r4, ip
     298:	4655      	mov	r5, sl
     29a:	432c      	orrs	r4, r5
     29c:	d003      	beq.n	2a6 <_sercom_get_async_baud_val+0x16a>
			r |= 0x01;
     29e:	0034      	movs	r4, r6
     2a0:	4304      	orrs	r4, r0
     2a2:	0022      	movs	r2, r4
     2a4:	000b      	movs	r3, r1
		if (r >= d) {
     2a6:	9800      	ldr	r0, [sp, #0]
     2a8:	9901      	ldr	r1, [sp, #4]
     2aa:	4299      	cmp	r1, r3
     2ac:	d8db      	bhi.n	266 <_sercom_get_async_baud_val+0x12a>
     2ae:	d1d2      	bne.n	256 <_sercom_get_async_baud_val+0x11a>
     2b0:	4290      	cmp	r0, r2
     2b2:	d8d8      	bhi.n	266 <_sercom_get_async_baud_val+0x12a>
     2b4:	e7cf      	b.n	256 <_sercom_get_async_baud_val+0x11a>
     2b6:	9c00      	ldr	r4, [sp, #0]
     2b8:	9d01      	ldr	r5, [sp, #4]
			baud_int -= baud_fp;
     2ba:	9902      	ldr	r1, [sp, #8]
     2bc:	9a07      	ldr	r2, [sp, #28]
     2be:	1a8b      	subs	r3, r1, r2
			baud_int = baud_int / BAUD_FP_MAX;
     2c0:	08db      	lsrs	r3, r3, #3
			if(baud_int < BAUD_INT_MAX) {
     2c2:	4911      	ldr	r1, [pc, #68]	; (308 <_sercom_get_async_baud_val+0x1cc>)
     2c4:	428b      	cmp	r3, r1
     2c6:	d914      	bls.n	2f2 <_sercom_get_async_baud_val+0x1b6>
		for(baud_fp = 0; baud_fp < BAUD_FP_MAX; baud_fp++) {
     2c8:	9b06      	ldr	r3, [sp, #24]
     2ca:	3301      	adds	r3, #1
     2cc:	b2db      	uxtb	r3, r3
     2ce:	0019      	movs	r1, r3
     2d0:	9306      	str	r3, [sp, #24]
     2d2:	0013      	movs	r3, r2
     2d4:	3301      	adds	r3, #1
     2d6:	9307      	str	r3, [sp, #28]
     2d8:	2908      	cmp	r1, #8
     2da:	d008      	beq.n	2ee <_sercom_get_async_baud_val+0x1b2>
	uint64_t q = 0, r = 0, bit_shift;
     2dc:	2300      	movs	r3, #0
     2de:	9302      	str	r3, [sp, #8]
     2e0:	2200      	movs	r2, #0
     2e2:	2300      	movs	r3, #0
	for (i = 63; i >= 0; i--) {
     2e4:	213f      	movs	r1, #63	; 0x3f
     2e6:	9400      	str	r4, [sp, #0]
     2e8:	9501      	str	r5, [sp, #4]
     2ea:	000f      	movs	r7, r1
     2ec:	e7bd      	b.n	26a <_sercom_get_async_baud_val+0x12e>
			return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     2ee:	2240      	movs	r2, #64	; 0x40
     2f0:	e734      	b.n	15c <_sercom_get_async_baud_val+0x20>
     2f2:	2240      	movs	r2, #64	; 0x40
		if(baud_fp == BAUD_FP_MAX) {
     2f4:	9906      	ldr	r1, [sp, #24]
     2f6:	2908      	cmp	r1, #8
     2f8:	d100      	bne.n	2fc <_sercom_get_async_baud_val+0x1c0>
     2fa:	e72f      	b.n	15c <_sercom_get_async_baud_val+0x20>
		baud_calculated = baud_int | (baud_fp << 13);
     2fc:	034a      	lsls	r2, r1, #13
     2fe:	431a      	orrs	r2, r3
     300:	e788      	b.n	214 <_sercom_get_async_baud_val+0xd8>
     302:	46c0      	nop			; (mov r8, r8)
     304:	000015f9 	.word	0x000015f9
     308:	00001fff 	.word	0x00001fff

0000030c <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     30c:	b510      	push	{r4, lr}
     30e:	b082      	sub	sp, #8
     310:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     312:	4b0e      	ldr	r3, [pc, #56]	; (34c <sercom_set_gclk_generator+0x40>)
     314:	781b      	ldrb	r3, [r3, #0]
     316:	2b00      	cmp	r3, #0
     318:	d007      	beq.n	32a <sercom_set_gclk_generator+0x1e>
     31a:	2900      	cmp	r1, #0
     31c:	d105      	bne.n	32a <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     31e:	4b0b      	ldr	r3, [pc, #44]	; (34c <sercom_set_gclk_generator+0x40>)
     320:	785b      	ldrb	r3, [r3, #1]
     322:	4283      	cmp	r3, r0
     324:	d010      	beq.n	348 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     326:	201d      	movs	r0, #29
     328:	e00c      	b.n	344 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     32a:	a901      	add	r1, sp, #4
     32c:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     32e:	2013      	movs	r0, #19
     330:	4b07      	ldr	r3, [pc, #28]	; (350 <sercom_set_gclk_generator+0x44>)
     332:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     334:	2013      	movs	r0, #19
     336:	4b07      	ldr	r3, [pc, #28]	; (354 <sercom_set_gclk_generator+0x48>)
     338:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     33a:	4b04      	ldr	r3, [pc, #16]	; (34c <sercom_set_gclk_generator+0x40>)
     33c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     33e:	2201      	movs	r2, #1
     340:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     342:	2000      	movs	r0, #0
}
     344:	b002      	add	sp, #8
     346:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     348:	2000      	movs	r0, #0
     34a:	e7fb      	b.n	344 <sercom_set_gclk_generator+0x38>
     34c:	20000084 	.word	0x20000084
     350:	000010ed 	.word	0x000010ed
     354:	00001061 	.word	0x00001061

00000358 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     358:	4b40      	ldr	r3, [pc, #256]	; (45c <_sercom_get_default_pad+0x104>)
     35a:	4298      	cmp	r0, r3
     35c:	d031      	beq.n	3c2 <_sercom_get_default_pad+0x6a>
     35e:	d90a      	bls.n	376 <_sercom_get_default_pad+0x1e>
     360:	4b3f      	ldr	r3, [pc, #252]	; (460 <_sercom_get_default_pad+0x108>)
     362:	4298      	cmp	r0, r3
     364:	d04d      	beq.n	402 <_sercom_get_default_pad+0xaa>
     366:	4b3f      	ldr	r3, [pc, #252]	; (464 <_sercom_get_default_pad+0x10c>)
     368:	4298      	cmp	r0, r3
     36a:	d05a      	beq.n	422 <_sercom_get_default_pad+0xca>
     36c:	4b3e      	ldr	r3, [pc, #248]	; (468 <_sercom_get_default_pad+0x110>)
     36e:	4298      	cmp	r0, r3
     370:	d037      	beq.n	3e2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     372:	2000      	movs	r0, #0
}
     374:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     376:	4b3d      	ldr	r3, [pc, #244]	; (46c <_sercom_get_default_pad+0x114>)
     378:	4298      	cmp	r0, r3
     37a:	d00c      	beq.n	396 <_sercom_get_default_pad+0x3e>
     37c:	4b3c      	ldr	r3, [pc, #240]	; (470 <_sercom_get_default_pad+0x118>)
     37e:	4298      	cmp	r0, r3
     380:	d1f7      	bne.n	372 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     382:	2901      	cmp	r1, #1
     384:	d017      	beq.n	3b6 <_sercom_get_default_pad+0x5e>
     386:	2900      	cmp	r1, #0
     388:	d05d      	beq.n	446 <_sercom_get_default_pad+0xee>
     38a:	2902      	cmp	r1, #2
     38c:	d015      	beq.n	3ba <_sercom_get_default_pad+0x62>
     38e:	2903      	cmp	r1, #3
     390:	d015      	beq.n	3be <_sercom_get_default_pad+0x66>
	return 0;
     392:	2000      	movs	r0, #0
     394:	e7ee      	b.n	374 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     396:	2901      	cmp	r1, #1
     398:	d007      	beq.n	3aa <_sercom_get_default_pad+0x52>
     39a:	2900      	cmp	r1, #0
     39c:	d051      	beq.n	442 <_sercom_get_default_pad+0xea>
     39e:	2902      	cmp	r1, #2
     3a0:	d005      	beq.n	3ae <_sercom_get_default_pad+0x56>
     3a2:	2903      	cmp	r1, #3
     3a4:	d005      	beq.n	3b2 <_sercom_get_default_pad+0x5a>
	return 0;
     3a6:	2000      	movs	r0, #0
     3a8:	e7e4      	b.n	374 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3aa:	4832      	ldr	r0, [pc, #200]	; (474 <_sercom_get_default_pad+0x11c>)
     3ac:	e7e2      	b.n	374 <_sercom_get_default_pad+0x1c>
     3ae:	4832      	ldr	r0, [pc, #200]	; (478 <_sercom_get_default_pad+0x120>)
     3b0:	e7e0      	b.n	374 <_sercom_get_default_pad+0x1c>
     3b2:	4832      	ldr	r0, [pc, #200]	; (47c <_sercom_get_default_pad+0x124>)
     3b4:	e7de      	b.n	374 <_sercom_get_default_pad+0x1c>
     3b6:	4832      	ldr	r0, [pc, #200]	; (480 <_sercom_get_default_pad+0x128>)
     3b8:	e7dc      	b.n	374 <_sercom_get_default_pad+0x1c>
     3ba:	4832      	ldr	r0, [pc, #200]	; (484 <_sercom_get_default_pad+0x12c>)
     3bc:	e7da      	b.n	374 <_sercom_get_default_pad+0x1c>
     3be:	4832      	ldr	r0, [pc, #200]	; (488 <_sercom_get_default_pad+0x130>)
     3c0:	e7d8      	b.n	374 <_sercom_get_default_pad+0x1c>
     3c2:	2901      	cmp	r1, #1
     3c4:	d007      	beq.n	3d6 <_sercom_get_default_pad+0x7e>
     3c6:	2900      	cmp	r1, #0
     3c8:	d03f      	beq.n	44a <_sercom_get_default_pad+0xf2>
     3ca:	2902      	cmp	r1, #2
     3cc:	d005      	beq.n	3da <_sercom_get_default_pad+0x82>
     3ce:	2903      	cmp	r1, #3
     3d0:	d005      	beq.n	3de <_sercom_get_default_pad+0x86>
	return 0;
     3d2:	2000      	movs	r0, #0
     3d4:	e7ce      	b.n	374 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3d6:	482d      	ldr	r0, [pc, #180]	; (48c <_sercom_get_default_pad+0x134>)
     3d8:	e7cc      	b.n	374 <_sercom_get_default_pad+0x1c>
     3da:	482d      	ldr	r0, [pc, #180]	; (490 <_sercom_get_default_pad+0x138>)
     3dc:	e7ca      	b.n	374 <_sercom_get_default_pad+0x1c>
     3de:	482d      	ldr	r0, [pc, #180]	; (494 <_sercom_get_default_pad+0x13c>)
     3e0:	e7c8      	b.n	374 <_sercom_get_default_pad+0x1c>
     3e2:	2901      	cmp	r1, #1
     3e4:	d007      	beq.n	3f6 <_sercom_get_default_pad+0x9e>
     3e6:	2900      	cmp	r1, #0
     3e8:	d031      	beq.n	44e <_sercom_get_default_pad+0xf6>
     3ea:	2902      	cmp	r1, #2
     3ec:	d005      	beq.n	3fa <_sercom_get_default_pad+0xa2>
     3ee:	2903      	cmp	r1, #3
     3f0:	d005      	beq.n	3fe <_sercom_get_default_pad+0xa6>
	return 0;
     3f2:	2000      	movs	r0, #0
     3f4:	e7be      	b.n	374 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     3f6:	4828      	ldr	r0, [pc, #160]	; (498 <_sercom_get_default_pad+0x140>)
     3f8:	e7bc      	b.n	374 <_sercom_get_default_pad+0x1c>
     3fa:	4828      	ldr	r0, [pc, #160]	; (49c <_sercom_get_default_pad+0x144>)
     3fc:	e7ba      	b.n	374 <_sercom_get_default_pad+0x1c>
     3fe:	4828      	ldr	r0, [pc, #160]	; (4a0 <_sercom_get_default_pad+0x148>)
     400:	e7b8      	b.n	374 <_sercom_get_default_pad+0x1c>
     402:	2901      	cmp	r1, #1
     404:	d007      	beq.n	416 <_sercom_get_default_pad+0xbe>
     406:	2900      	cmp	r1, #0
     408:	d023      	beq.n	452 <_sercom_get_default_pad+0xfa>
     40a:	2902      	cmp	r1, #2
     40c:	d005      	beq.n	41a <_sercom_get_default_pad+0xc2>
     40e:	2903      	cmp	r1, #3
     410:	d005      	beq.n	41e <_sercom_get_default_pad+0xc6>
	return 0;
     412:	2000      	movs	r0, #0
     414:	e7ae      	b.n	374 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     416:	4823      	ldr	r0, [pc, #140]	; (4a4 <_sercom_get_default_pad+0x14c>)
     418:	e7ac      	b.n	374 <_sercom_get_default_pad+0x1c>
     41a:	4823      	ldr	r0, [pc, #140]	; (4a8 <_sercom_get_default_pad+0x150>)
     41c:	e7aa      	b.n	374 <_sercom_get_default_pad+0x1c>
     41e:	4823      	ldr	r0, [pc, #140]	; (4ac <_sercom_get_default_pad+0x154>)
     420:	e7a8      	b.n	374 <_sercom_get_default_pad+0x1c>
     422:	2901      	cmp	r1, #1
     424:	d007      	beq.n	436 <_sercom_get_default_pad+0xde>
     426:	2900      	cmp	r1, #0
     428:	d015      	beq.n	456 <_sercom_get_default_pad+0xfe>
     42a:	2902      	cmp	r1, #2
     42c:	d005      	beq.n	43a <_sercom_get_default_pad+0xe2>
     42e:	2903      	cmp	r1, #3
     430:	d005      	beq.n	43e <_sercom_get_default_pad+0xe6>
	return 0;
     432:	2000      	movs	r0, #0
     434:	e79e      	b.n	374 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     436:	481e      	ldr	r0, [pc, #120]	; (4b0 <_sercom_get_default_pad+0x158>)
     438:	e79c      	b.n	374 <_sercom_get_default_pad+0x1c>
     43a:	481e      	ldr	r0, [pc, #120]	; (4b4 <_sercom_get_default_pad+0x15c>)
     43c:	e79a      	b.n	374 <_sercom_get_default_pad+0x1c>
     43e:	481e      	ldr	r0, [pc, #120]	; (4b8 <_sercom_get_default_pad+0x160>)
     440:	e798      	b.n	374 <_sercom_get_default_pad+0x1c>
     442:	481e      	ldr	r0, [pc, #120]	; (4bc <_sercom_get_default_pad+0x164>)
     444:	e796      	b.n	374 <_sercom_get_default_pad+0x1c>
     446:	2003      	movs	r0, #3
     448:	e794      	b.n	374 <_sercom_get_default_pad+0x1c>
     44a:	481d      	ldr	r0, [pc, #116]	; (4c0 <_sercom_get_default_pad+0x168>)
     44c:	e792      	b.n	374 <_sercom_get_default_pad+0x1c>
     44e:	481d      	ldr	r0, [pc, #116]	; (4c4 <_sercom_get_default_pad+0x16c>)
     450:	e790      	b.n	374 <_sercom_get_default_pad+0x1c>
     452:	481d      	ldr	r0, [pc, #116]	; (4c8 <_sercom_get_default_pad+0x170>)
     454:	e78e      	b.n	374 <_sercom_get_default_pad+0x1c>
     456:	481d      	ldr	r0, [pc, #116]	; (4cc <_sercom_get_default_pad+0x174>)
     458:	e78c      	b.n	374 <_sercom_get_default_pad+0x1c>
     45a:	46c0      	nop			; (mov r8, r8)
     45c:	42001000 	.word	0x42001000
     460:	42001800 	.word	0x42001800
     464:	42001c00 	.word	0x42001c00
     468:	42001400 	.word	0x42001400
     46c:	42000800 	.word	0x42000800
     470:	42000c00 	.word	0x42000c00
     474:	00050003 	.word	0x00050003
     478:	00060003 	.word	0x00060003
     47c:	00070003 	.word	0x00070003
     480:	00010003 	.word	0x00010003
     484:	001e0003 	.word	0x001e0003
     488:	001f0003 	.word	0x001f0003
     48c:	00090003 	.word	0x00090003
     490:	000a0003 	.word	0x000a0003
     494:	000b0003 	.word	0x000b0003
     498:	00110003 	.word	0x00110003
     49c:	00120003 	.word	0x00120003
     4a0:	00130003 	.word	0x00130003
     4a4:	000d0003 	.word	0x000d0003
     4a8:	000e0003 	.word	0x000e0003
     4ac:	000f0003 	.word	0x000f0003
     4b0:	00170003 	.word	0x00170003
     4b4:	00180003 	.word	0x00180003
     4b8:	00190003 	.word	0x00190003
     4bc:	00040003 	.word	0x00040003
     4c0:	00080003 	.word	0x00080003
     4c4:	00100003 	.word	0x00100003
     4c8:	000c0003 	.word	0x000c0003
     4cc:	00160003 	.word	0x00160003

000004d0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     4d0:	b530      	push	{r4, r5, lr}
     4d2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     4d4:	4b0b      	ldr	r3, [pc, #44]	; (504 <_sercom_get_sercom_inst_index+0x34>)
     4d6:	466a      	mov	r2, sp
     4d8:	cb32      	ldmia	r3!, {r1, r4, r5}
     4da:	c232      	stmia	r2!, {r1, r4, r5}
     4dc:	cb32      	ldmia	r3!, {r1, r4, r5}
     4de:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     4e0:	9b00      	ldr	r3, [sp, #0]
     4e2:	4283      	cmp	r3, r0
     4e4:	d00b      	beq.n	4fe <_sercom_get_sercom_inst_index+0x2e>
     4e6:	2301      	movs	r3, #1
     4e8:	009a      	lsls	r2, r3, #2
     4ea:	4669      	mov	r1, sp
     4ec:	5852      	ldr	r2, [r2, r1]
     4ee:	4282      	cmp	r2, r0
     4f0:	d006      	beq.n	500 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4f2:	3301      	adds	r3, #1
     4f4:	2b06      	cmp	r3, #6
     4f6:	d1f7      	bne.n	4e8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     4f8:	2000      	movs	r0, #0
}
     4fa:	b007      	add	sp, #28
     4fc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     4fe:	2300      	movs	r3, #0
			return i;
     500:	b2d8      	uxtb	r0, r3
     502:	e7fa      	b.n	4fa <_sercom_get_sercom_inst_index+0x2a>
     504:	00002178 	.word	0x00002178

00000508 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
     508:	b5f0      	push	{r4, r5, r6, r7, lr}
     50a:	46c6      	mov	lr, r8
     50c:	b500      	push	{lr}
     50e:	000c      	movs	r4, r1
     510:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
     512:	2800      	cmp	r0, #0
     514:	d10f      	bne.n	536 <_read+0x2e>
		return -1;
	}

	for (; len > 0; --len) {
     516:	2a00      	cmp	r2, #0
     518:	dd11      	ble.n	53e <_read+0x36>
     51a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
     51c:	4e09      	ldr	r6, [pc, #36]	; (544 <_read+0x3c>)
     51e:	4d0a      	ldr	r5, [pc, #40]	; (548 <_read+0x40>)
     520:	6830      	ldr	r0, [r6, #0]
     522:	0021      	movs	r1, r4
     524:	682b      	ldr	r3, [r5, #0]
     526:	4798      	blx	r3
		ptr++;
     528:	3401      	adds	r4, #1
	for (; len > 0; --len) {
     52a:	42bc      	cmp	r4, r7
     52c:	d1f8      	bne.n	520 <_read+0x18>
		nChars++;
	}
	return nChars;
}
     52e:	4640      	mov	r0, r8
     530:	bc04      	pop	{r2}
     532:	4690      	mov	r8, r2
     534:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
     536:	2301      	movs	r3, #1
     538:	425b      	negs	r3, r3
     53a:	4698      	mov	r8, r3
     53c:	e7f7      	b.n	52e <_read+0x26>
	for (; len > 0; --len) {
     53e:	4680      	mov	r8, r0
     540:	e7f5      	b.n	52e <_read+0x26>
     542:	46c0      	nop			; (mov r8, r8)
     544:	200000d4 	.word	0x200000d4
     548:	200000cc 	.word	0x200000cc

0000054c <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
     54c:	b5f0      	push	{r4, r5, r6, r7, lr}
     54e:	46c6      	mov	lr, r8
     550:	b500      	push	{lr}
     552:	000e      	movs	r6, r1
     554:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
     556:	3801      	subs	r0, #1
     558:	2802      	cmp	r0, #2
     55a:	d810      	bhi.n	57e <_write+0x32>
		return -1;
	}

	for (; len != 0; --len) {
     55c:	2a00      	cmp	r2, #0
     55e:	d011      	beq.n	584 <_write+0x38>
     560:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
     562:	4b0c      	ldr	r3, [pc, #48]	; (594 <_write+0x48>)
     564:	4698      	mov	r8, r3
     566:	4f0c      	ldr	r7, [pc, #48]	; (598 <_write+0x4c>)
     568:	4643      	mov	r3, r8
     56a:	6818      	ldr	r0, [r3, #0]
     56c:	5d31      	ldrb	r1, [r6, r4]
     56e:	683b      	ldr	r3, [r7, #0]
     570:	4798      	blx	r3
     572:	2800      	cmp	r0, #0
     574:	db08      	blt.n	588 <_write+0x3c>
			return -1;
		}
		++nChars;
     576:	3401      	adds	r4, #1
	for (; len != 0; --len) {
     578:	42a5      	cmp	r5, r4
     57a:	d1f5      	bne.n	568 <_write+0x1c>
     57c:	e006      	b.n	58c <_write+0x40>
		return -1;
     57e:	2401      	movs	r4, #1
     580:	4264      	negs	r4, r4
     582:	e003      	b.n	58c <_write+0x40>
	for (; len != 0; --len) {
     584:	0014      	movs	r4, r2
     586:	e001      	b.n	58c <_write+0x40>
			return -1;
     588:	2401      	movs	r4, #1
     58a:	4264      	negs	r4, r4
	}
	return nChars;
}
     58c:	0020      	movs	r0, r4
     58e:	bc04      	pop	{r2}
     590:	4690      	mov	r8, r2
     592:	bdf0      	pop	{r4, r5, r6, r7, pc}
     594:	200000d4 	.word	0x200000d4
     598:	200000d0 	.word	0x200000d0

0000059c <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     59c:	b5f0      	push	{r4, r5, r6, r7, lr}
     59e:	46de      	mov	lr, fp
     5a0:	4657      	mov	r7, sl
     5a2:	464e      	mov	r6, r9
     5a4:	4645      	mov	r5, r8
     5a6:	b5e0      	push	{r5, r6, r7, lr}
     5a8:	b091      	sub	sp, #68	; 0x44
     5aa:	0005      	movs	r5, r0
     5ac:	000c      	movs	r4, r1
     5ae:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     5b0:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     5b2:	0008      	movs	r0, r1
     5b4:	4bbb      	ldr	r3, [pc, #748]	; (8a4 <usart_init+0x308>)
     5b6:	4798      	blx	r3
     5b8:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5ba:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     5bc:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     5be:	07db      	lsls	r3, r3, #31
     5c0:	d506      	bpl.n	5d0 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     5c2:	b011      	add	sp, #68	; 0x44
     5c4:	bc3c      	pop	{r2, r3, r4, r5}
     5c6:	4690      	mov	r8, r2
     5c8:	4699      	mov	r9, r3
     5ca:	46a2      	mov	sl, r4
     5cc:	46ab      	mov	fp, r5
     5ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5d0:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     5d2:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     5d4:	079b      	lsls	r3, r3, #30
     5d6:	d4f4      	bmi.n	5c2 <usart_init+0x26>
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     5d8:	49b3      	ldr	r1, [pc, #716]	; (8a8 <usart_init+0x30c>)
     5da:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     5dc:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     5de:	2301      	movs	r3, #1
     5e0:	40bb      	lsls	r3, r7
     5e2:	4303      	orrs	r3, r0
     5e4:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     5e6:	a90f      	add	r1, sp, #60	; 0x3c
     5e8:	272d      	movs	r7, #45	; 0x2d
     5ea:	5df3      	ldrb	r3, [r6, r7]
     5ec:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     5ee:	3214      	adds	r2, #20
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     5f0:	b2d3      	uxtb	r3, r2
     5f2:	9302      	str	r3, [sp, #8]
     5f4:	0018      	movs	r0, r3
     5f6:	4bad      	ldr	r3, [pc, #692]	; (8ac <usart_init+0x310>)
     5f8:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     5fa:	9802      	ldr	r0, [sp, #8]
     5fc:	4bac      	ldr	r3, [pc, #688]	; (8b0 <usart_init+0x314>)
     5fe:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     600:	5df0      	ldrb	r0, [r6, r7]
     602:	2100      	movs	r1, #0
     604:	4bab      	ldr	r3, [pc, #684]	; (8b4 <usart_init+0x318>)
     606:	4798      	blx	r3
	module->character_size = config->character_size;
     608:	7af3      	ldrb	r3, [r6, #11]
     60a:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     60c:	2324      	movs	r3, #36	; 0x24
     60e:	5cf3      	ldrb	r3, [r6, r3]
     610:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     612:	2325      	movs	r3, #37	; 0x25
     614:	5cf3      	ldrb	r3, [r6, r3]
     616:	71eb      	strb	r3, [r5, #7]
	module->lin_slave_enabled = config->lin_slave_enable;
     618:	7ef3      	ldrb	r3, [r6, #27]
     61a:	722b      	strb	r3, [r5, #8]
	module->start_frame_detection_enabled = config->start_frame_detection_enable;
     61c:	7f33      	ldrb	r3, [r6, #28]
     61e:	726b      	strb	r3, [r5, #9]
	SercomUsart *const usart_hw = &(module->hw->USART);
     620:	682b      	ldr	r3, [r5, #0]
     622:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     624:	0018      	movs	r0, r3
     626:	4b9f      	ldr	r3, [pc, #636]	; (8a4 <usart_init+0x308>)
     628:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     62a:	3014      	adds	r0, #20
	uint16_t baud  = 0;
     62c:	2200      	movs	r2, #0
     62e:	230e      	movs	r3, #14
     630:	a906      	add	r1, sp, #24
     632:	468c      	mov	ip, r1
     634:	4463      	add	r3, ip
     636:	801a      	strh	r2, [r3, #0]
	switch (config->sample_rate) {
     638:	8a32      	ldrh	r2, [r6, #16]
     63a:	9202      	str	r2, [sp, #8]
     63c:	2380      	movs	r3, #128	; 0x80
     63e:	01db      	lsls	r3, r3, #7
     640:	429a      	cmp	r2, r3
     642:	d100      	bne.n	646 <usart_init+0xaa>
     644:	e09c      	b.n	780 <usart_init+0x1e4>
     646:	d90f      	bls.n	668 <usart_init+0xcc>
     648:	23c0      	movs	r3, #192	; 0xc0
     64a:	01db      	lsls	r3, r3, #7
     64c:	9a02      	ldr	r2, [sp, #8]
     64e:	429a      	cmp	r2, r3
     650:	d100      	bne.n	654 <usart_init+0xb8>
     652:	e090      	b.n	776 <usart_init+0x1da>
     654:	2380      	movs	r3, #128	; 0x80
     656:	021b      	lsls	r3, r3, #8
     658:	429a      	cmp	r2, r3
     65a:	d000      	beq.n	65e <usart_init+0xc2>
     65c:	e11d      	b.n	89a <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_3;
     65e:	2303      	movs	r3, #3
     660:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     662:	2300      	movs	r3, #0
     664:	9307      	str	r3, [sp, #28]
     666:	e008      	b.n	67a <usart_init+0xde>
	switch (config->sample_rate) {
     668:	2380      	movs	r3, #128	; 0x80
     66a:	019b      	lsls	r3, r3, #6
     66c:	429a      	cmp	r2, r3
     66e:	d000      	beq.n	672 <usart_init+0xd6>
     670:	e113      	b.n	89a <usart_init+0x2fe>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     672:	2310      	movs	r3, #16
     674:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     676:	3b0f      	subs	r3, #15
     678:	9307      	str	r3, [sp, #28]
	ctrla = (uint32_t)config->data_order |
     67a:	6833      	ldr	r3, [r6, #0]
     67c:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     67e:	68f3      	ldr	r3, [r6, #12]
     680:	469b      	mov	fp, r3
		config->sample_adjustment |
     682:	6973      	ldr	r3, [r6, #20]
     684:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     686:	7e33      	ldrb	r3, [r6, #24]
     688:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     68a:	2326      	movs	r3, #38	; 0x26
     68c:	5cf3      	ldrb	r3, [r6, r3]
     68e:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     690:	6873      	ldr	r3, [r6, #4]
     692:	4699      	mov	r9, r3
	switch (transfer_mode)
     694:	2b00      	cmp	r3, #0
     696:	d100      	bne.n	69a <usart_init+0xfe>
     698:	e09e      	b.n	7d8 <usart_init+0x23c>
     69a:	2380      	movs	r3, #128	; 0x80
     69c:	055b      	lsls	r3, r3, #21
     69e:	4599      	cmp	r9, r3
     6a0:	d100      	bne.n	6a4 <usart_init+0x108>
     6a2:	e082      	b.n	7aa <usart_init+0x20e>
	if(config->encoding_format_enable) {
     6a4:	7e73      	ldrb	r3, [r6, #25]
     6a6:	2b00      	cmp	r3, #0
     6a8:	d002      	beq.n	6b0 <usart_init+0x114>
		usart_hw->RXPL.reg = config->receive_pulse_length;
     6aa:	7eb3      	ldrb	r3, [r6, #26]
     6ac:	4642      	mov	r2, r8
     6ae:	7393      	strb	r3, [r2, #14]
{
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	SercomUsart *const usart_hw = &(module->hw->USART);
     6b0:	682a      	ldr	r2, [r5, #0]
     6b2:	9f02      	ldr	r7, [sp, #8]

#ifdef FEATURE_USART_SYNC_SCHEME_V2
	return (usart_hw->SYNCBUSY.reg);
     6b4:	69d3      	ldr	r3, [r2, #28]
		const struct usart_module *const module)
{
	/* Sanity check */
	Assert(module);

	while (usart_is_syncing(module)) {
     6b6:	2b00      	cmp	r3, #0
     6b8:	d1fc      	bne.n	6b4 <usart_init+0x118>
	usart_hw->BAUD.reg = baud;
     6ba:	330e      	adds	r3, #14
     6bc:	aa06      	add	r2, sp, #24
     6be:	4694      	mov	ip, r2
     6c0:	4463      	add	r3, ip
     6c2:	881b      	ldrh	r3, [r3, #0]
     6c4:	4642      	mov	r2, r8
     6c6:	8193      	strh	r3, [r2, #12]
	ctrla |= transfer_mode;
     6c8:	9b05      	ldr	r3, [sp, #20]
     6ca:	465a      	mov	r2, fp
     6cc:	4313      	orrs	r3, r2
     6ce:	9a03      	ldr	r2, [sp, #12]
     6d0:	4313      	orrs	r3, r2
     6d2:	464a      	mov	r2, r9
     6d4:	4313      	orrs	r3, r2
     6d6:	431f      	orrs	r7, r3
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     6d8:	9b04      	ldr	r3, [sp, #16]
     6da:	021b      	lsls	r3, r3, #8
	ctrla |= transfer_mode;
     6dc:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     6de:	4653      	mov	r3, sl
     6e0:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     6e2:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     6e4:	2327      	movs	r3, #39	; 0x27
     6e6:	5cf3      	ldrb	r3, [r6, r3]
     6e8:	2b00      	cmp	r3, #0
     6ea:	d101      	bne.n	6f0 <usart_init+0x154>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     6ec:	3304      	adds	r3, #4
     6ee:	431f      	orrs	r7, r3
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     6f0:	7e73      	ldrb	r3, [r6, #25]
     6f2:	029b      	lsls	r3, r3, #10
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     6f4:	7f32      	ldrb	r2, [r6, #28]
     6f6:	0252      	lsls	r2, r2, #9
			(config->encoding_format_enable << SERCOM_USART_CTRLB_ENC_Pos) |
     6f8:	4313      	orrs	r3, r2
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     6fa:	7f72      	ldrb	r2, [r6, #29]
     6fc:	0212      	lsls	r2, r2, #8
			(config->start_frame_detection_enable << SERCOM_USART_CTRLB_SFDE_Pos) |
     6fe:	4313      	orrs	r3, r2
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     700:	2224      	movs	r2, #36	; 0x24
     702:	5cb2      	ldrb	r2, [r6, r2]
     704:	0452      	lsls	r2, r2, #17
			(config->collision_detection_enable << SERCOM_USART_CTRLB_COLDEN_Pos) |
     706:	4313      	orrs	r3, r2
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     708:	2225      	movs	r2, #37	; 0x25
     70a:	5cb2      	ldrb	r2, [r6, r2]
     70c:	0412      	lsls	r2, r2, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     70e:	4313      	orrs	r3, r2
	ctrlb |= (uint32_t)config->character_size;
     710:	7af1      	ldrb	r1, [r6, #11]
     712:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     714:	8933      	ldrh	r3, [r6, #8]
     716:	2bff      	cmp	r3, #255	; 0xff
     718:	d100      	bne.n	71c <usart_init+0x180>
     71a:	e081      	b.n	820 <usart_init+0x284>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     71c:	2280      	movs	r2, #128	; 0x80
     71e:	0452      	lsls	r2, r2, #17
     720:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     722:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     724:	232c      	movs	r3, #44	; 0x2c
     726:	5cf3      	ldrb	r3, [r6, r3]
     728:	2b00      	cmp	r3, #0
     72a:	d103      	bne.n	734 <usart_init+0x198>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     72c:	4b62      	ldr	r3, [pc, #392]	; (8b8 <usart_init+0x31c>)
     72e:	789b      	ldrb	r3, [r3, #2]
     730:	079b      	lsls	r3, r3, #30
     732:	d501      	bpl.n	738 <usart_init+0x19c>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     734:	2380      	movs	r3, #128	; 0x80
     736:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     738:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     73a:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     73c:	2b00      	cmp	r3, #0
     73e:	d1fc      	bne.n	73a <usart_init+0x19e>
	usart_hw->CTRLB.reg = ctrlb;
     740:	4643      	mov	r3, r8
     742:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     744:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     746:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     748:	2b00      	cmp	r3, #0
     74a:	d1fc      	bne.n	746 <usart_init+0x1aa>
	usart_hw->CTRLA.reg = ctrla;
     74c:	4643      	mov	r3, r8
     74e:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     750:	ab0e      	add	r3, sp, #56	; 0x38
     752:	2280      	movs	r2, #128	; 0x80
     754:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     756:	2200      	movs	r2, #0
     758:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     75a:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     75c:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     75e:	6b33      	ldr	r3, [r6, #48]	; 0x30
     760:	930a      	str	r3, [sp, #40]	; 0x28
     762:	6b73      	ldr	r3, [r6, #52]	; 0x34
     764:	930b      	str	r3, [sp, #44]	; 0x2c
     766:	6bb3      	ldr	r3, [r6, #56]	; 0x38
     768:	930c      	str	r3, [sp, #48]	; 0x30
     76a:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
     76c:	9302      	str	r3, [sp, #8]
     76e:	930d      	str	r3, [sp, #52]	; 0x34
     770:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     772:	ae0a      	add	r6, sp, #40	; 0x28
     774:	e063      	b.n	83e <usart_init+0x2a2>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     776:	2308      	movs	r3, #8
     778:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL;
     77a:	3b07      	subs	r3, #7
     77c:	9307      	str	r3, [sp, #28]
     77e:	e77c      	b.n	67a <usart_init+0xde>
	ctrla = (uint32_t)config->data_order |
     780:	6833      	ldr	r3, [r6, #0]
     782:	9305      	str	r3, [sp, #20]
		(uint32_t)config->mux_setting |
     784:	68f3      	ldr	r3, [r6, #12]
     786:	469b      	mov	fp, r3
		config->sample_adjustment |
     788:	6973      	ldr	r3, [r6, #20]
     78a:	9303      	str	r3, [sp, #12]
		(config->immediate_buffer_overflow_notification << SERCOM_USART_CTRLA_IBON_Pos) |
     78c:	7e33      	ldrb	r3, [r6, #24]
     78e:	9304      	str	r3, [sp, #16]
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     790:	2326      	movs	r3, #38	; 0x26
     792:	5cf3      	ldrb	r3, [r6, r3]
     794:	469a      	mov	sl, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     796:	6873      	ldr	r3, [r6, #4]
     798:	4699      	mov	r9, r3
	switch (transfer_mode)
     79a:	2b00      	cmp	r3, #0
     79c:	d018      	beq.n	7d0 <usart_init+0x234>
     79e:	2380      	movs	r3, #128	; 0x80
     7a0:	055b      	lsls	r3, r3, #21
     7a2:	4599      	cmp	r9, r3
     7a4:	d001      	beq.n	7aa <usart_init+0x20e>
	enum status_code status_code = STATUS_OK;
     7a6:	2000      	movs	r0, #0
     7a8:	e025      	b.n	7f6 <usart_init+0x25a>
			if (!config->use_external_clock) {
     7aa:	2327      	movs	r3, #39	; 0x27
     7ac:	5cf3      	ldrb	r3, [r6, r3]
     7ae:	2b00      	cmp	r3, #0
     7b0:	d000      	beq.n	7b4 <usart_init+0x218>
     7b2:	e777      	b.n	6a4 <usart_init+0x108>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     7b4:	6a33      	ldr	r3, [r6, #32]
     7b6:	001f      	movs	r7, r3
     7b8:	b2c0      	uxtb	r0, r0
     7ba:	4b40      	ldr	r3, [pc, #256]	; (8bc <usart_init+0x320>)
     7bc:	4798      	blx	r3
     7be:	0001      	movs	r1, r0
     7c0:	220e      	movs	r2, #14
     7c2:	ab06      	add	r3, sp, #24
     7c4:	469c      	mov	ip, r3
     7c6:	4462      	add	r2, ip
     7c8:	0038      	movs	r0, r7
     7ca:	4b3d      	ldr	r3, [pc, #244]	; (8c0 <usart_init+0x324>)
     7cc:	4798      	blx	r3
     7ce:	e012      	b.n	7f6 <usart_init+0x25a>
			sample_num = SERCOM_ASYNC_SAMPLE_NUM_8;
     7d0:	2308      	movs	r3, #8
     7d2:	9306      	str	r3, [sp, #24]
			mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     7d4:	2300      	movs	r3, #0
     7d6:	9307      	str	r3, [sp, #28]
			if (config->use_external_clock) {
     7d8:	2327      	movs	r3, #39	; 0x27
     7da:	5cf3      	ldrb	r3, [r6, r3]
     7dc:	2b00      	cmp	r3, #0
     7de:	d00e      	beq.n	7fe <usart_init+0x262>
				status_code =
     7e0:	9b06      	ldr	r3, [sp, #24]
     7e2:	9300      	str	r3, [sp, #0]
     7e4:	9b07      	ldr	r3, [sp, #28]
     7e6:	220e      	movs	r2, #14
     7e8:	a906      	add	r1, sp, #24
     7ea:	468c      	mov	ip, r1
     7ec:	4462      	add	r2, ip
     7ee:	6ab1      	ldr	r1, [r6, #40]	; 0x28
     7f0:	6a30      	ldr	r0, [r6, #32]
     7f2:	4f34      	ldr	r7, [pc, #208]	; (8c4 <usart_init+0x328>)
     7f4:	47b8      	blx	r7
	if (status_code != STATUS_OK) {
     7f6:	2800      	cmp	r0, #0
     7f8:	d000      	beq.n	7fc <usart_init+0x260>
     7fa:	e6e2      	b.n	5c2 <usart_init+0x26>
     7fc:	e752      	b.n	6a4 <usart_init+0x108>
						_sercom_get_async_baud_val(config->baudrate,
     7fe:	6a33      	ldr	r3, [r6, #32]
     800:	001f      	movs	r7, r3
     802:	b2c0      	uxtb	r0, r0
     804:	4b2d      	ldr	r3, [pc, #180]	; (8bc <usart_init+0x320>)
     806:	4798      	blx	r3
     808:	0001      	movs	r1, r0
				status_code =
     80a:	9b06      	ldr	r3, [sp, #24]
     80c:	9300      	str	r3, [sp, #0]
     80e:	9b07      	ldr	r3, [sp, #28]
     810:	220e      	movs	r2, #14
     812:	a806      	add	r0, sp, #24
     814:	4684      	mov	ip, r0
     816:	4462      	add	r2, ip
     818:	0038      	movs	r0, r7
     81a:	4f2a      	ldr	r7, [pc, #168]	; (8c4 <usart_init+0x328>)
     81c:	47b8      	blx	r7
     81e:	e7ea      	b.n	7f6 <usart_init+0x25a>
		if(config->lin_slave_enable) {
     820:	7ef3      	ldrb	r3, [r6, #27]
     822:	2b00      	cmp	r3, #0
     824:	d100      	bne.n	828 <usart_init+0x28c>
     826:	e77d      	b.n	724 <usart_init+0x188>
			ctrla |= SERCOM_USART_CTRLA_FORM(0x4);
     828:	2380      	movs	r3, #128	; 0x80
     82a:	04db      	lsls	r3, r3, #19
     82c:	431f      	orrs	r7, r3
     82e:	e779      	b.n	724 <usart_init+0x188>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     830:	0020      	movs	r0, r4
     832:	4b25      	ldr	r3, [pc, #148]	; (8c8 <usart_init+0x32c>)
     834:	4798      	blx	r3
     836:	e007      	b.n	848 <usart_init+0x2ac>
     838:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     83a:	2f04      	cmp	r7, #4
     83c:	d00d      	beq.n	85a <usart_init+0x2be>
     83e:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     840:	00bb      	lsls	r3, r7, #2
     842:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     844:	2800      	cmp	r0, #0
     846:	d0f3      	beq.n	830 <usart_init+0x294>
		if (current_pinmux != PINMUX_UNUSED) {
     848:	1c43      	adds	r3, r0, #1
     84a:	d0f5      	beq.n	838 <usart_init+0x29c>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     84c:	a90e      	add	r1, sp, #56	; 0x38
     84e:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     850:	0c00      	lsrs	r0, r0, #16
     852:	b2c0      	uxtb	r0, r0
     854:	4b1d      	ldr	r3, [pc, #116]	; (8cc <usart_init+0x330>)
     856:	4798      	blx	r3
     858:	e7ee      	b.n	838 <usart_init+0x29c>
		module->callback[i]            = NULL;
     85a:	2300      	movs	r3, #0
     85c:	60eb      	str	r3, [r5, #12]
     85e:	612b      	str	r3, [r5, #16]
     860:	616b      	str	r3, [r5, #20]
     862:	61ab      	str	r3, [r5, #24]
     864:	61eb      	str	r3, [r5, #28]
     866:	622b      	str	r3, [r5, #32]
	module->tx_buffer_ptr              = NULL;
     868:	62ab      	str	r3, [r5, #40]	; 0x28
	module->rx_buffer_ptr              = NULL;
     86a:	626b      	str	r3, [r5, #36]	; 0x24
	module->remaining_tx_buffer_length = 0x0000;
     86c:	2200      	movs	r2, #0
     86e:	85eb      	strh	r3, [r5, #46]	; 0x2e
	module->remaining_rx_buffer_length = 0x0000;
     870:	85ab      	strh	r3, [r5, #44]	; 0x2c
	module->callback_reg_mask          = 0x00;
     872:	3330      	adds	r3, #48	; 0x30
     874:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     876:	3301      	adds	r3, #1
     878:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     87a:	3301      	adds	r3, #1
     87c:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     87e:	3301      	adds	r3, #1
     880:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     882:	6828      	ldr	r0, [r5, #0]
     884:	4b07      	ldr	r3, [pc, #28]	; (8a4 <usart_init+0x308>)
     886:	4798      	blx	r3
     888:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     88a:	4911      	ldr	r1, [pc, #68]	; (8d0 <usart_init+0x334>)
     88c:	4b11      	ldr	r3, [pc, #68]	; (8d4 <usart_init+0x338>)
     88e:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     890:	00a4      	lsls	r4, r4, #2
     892:	4b11      	ldr	r3, [pc, #68]	; (8d8 <usart_init+0x33c>)
     894:	50e5      	str	r5, [r4, r3]
	return status_code;
     896:	2000      	movs	r0, #0
     898:	e693      	b.n	5c2 <usart_init+0x26>
	enum sercom_asynchronous_sample_num sample_num = SERCOM_ASYNC_SAMPLE_NUM_16;
     89a:	2310      	movs	r3, #16
     89c:	9306      	str	r3, [sp, #24]
	enum sercom_asynchronous_operation_mode mode = SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC;
     89e:	2300      	movs	r3, #0
     8a0:	9307      	str	r3, [sp, #28]
     8a2:	e6ea      	b.n	67a <usart_init+0xde>
     8a4:	000004d1 	.word	0x000004d1
     8a8:	40000400 	.word	0x40000400
     8ac:	000010ed 	.word	0x000010ed
     8b0:	00001061 	.word	0x00001061
     8b4:	0000030d 	.word	0x0000030d
     8b8:	41002000 	.word	0x41002000
     8bc:	00001109 	.word	0x00001109
     8c0:	00000115 	.word	0x00000115
     8c4:	0000013d 	.word	0x0000013d
     8c8:	00000359 	.word	0x00000359
     8cc:	000011e5 	.word	0x000011e5
     8d0:	00000979 	.word	0x00000979
     8d4:	00000b11 	.word	0x00000b11
     8d8:	200000d8 	.word	0x200000d8

000008dc <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     8dc:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     8de:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     8e0:	2a00      	cmp	r2, #0
     8e2:	d101      	bne.n	8e8 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     8e4:	0018      	movs	r0, r3
     8e6:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     8e8:	8dc2      	ldrh	r2, [r0, #46]	; 0x2e
     8ea:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     8ec:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     8ee:	2a00      	cmp	r2, #0
     8f0:	d1f8      	bne.n	8e4 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     8f2:	6803      	ldr	r3, [r0, #0]
	return (usart_hw->SYNCBUSY.reg);
     8f4:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
     8f6:	2a00      	cmp	r2, #0
     8f8:	d1fc      	bne.n	8f4 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     8fa:	8519      	strh	r1, [r3, #40]	; 0x28
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     8fc:	2102      	movs	r1, #2
     8fe:	7e1a      	ldrb	r2, [r3, #24]
     900:	420a      	tst	r2, r1
     902:	d0fc      	beq.n	8fe <usart_write_wait+0x22>
	return STATUS_OK;
     904:	2300      	movs	r3, #0
     906:	e7ed      	b.n	8e4 <usart_write_wait+0x8>

00000908 <usart_read_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the receiver is enabled */
	if (!(module->receiver_enabled)) {
     908:	7982      	ldrb	r2, [r0, #6]
		return STATUS_ERR_DENIED;
     90a:	231c      	movs	r3, #28
	if (!(module->receiver_enabled)) {
     90c:	2a00      	cmp	r2, #0
     90e:	d101      	bne.n	914 <usart_read_wait+0xc>

	/* Read data from USART module */
	*rx_data = usart_hw->DATA.reg;

	return STATUS_OK;
}
     910:	0018      	movs	r0, r3
     912:	4770      	bx	lr
	if (module->remaining_rx_buffer_length > 0) {
     914:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
     916:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     918:	3b17      	subs	r3, #23
	if (module->remaining_rx_buffer_length > 0) {
     91a:	2a00      	cmp	r2, #0
     91c:	d1f8      	bne.n	910 <usart_read_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     91e:	6802      	ldr	r2, [r0, #0]
	if (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_RXC)) {
     920:	7e10      	ldrb	r0, [r2, #24]
     922:	0740      	lsls	r0, r0, #29
     924:	d5f4      	bpl.n	910 <usart_read_wait+0x8>
	return (usart_hw->SYNCBUSY.reg);
     926:	69d3      	ldr	r3, [r2, #28]
	while (usart_is_syncing(module)) {
     928:	2b00      	cmp	r3, #0
     92a:	d1fc      	bne.n	926 <usart_read_wait+0x1e>
	error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     92c:	8b53      	ldrh	r3, [r2, #26]
     92e:	b2db      	uxtb	r3, r3
	if (error_code) {
     930:	0698      	lsls	r0, r3, #26
     932:	d01d      	beq.n	970 <usart_read_wait+0x68>
		if (error_code & SERCOM_USART_STATUS_FERR) {
     934:	0798      	lsls	r0, r3, #30
     936:	d503      	bpl.n	940 <usart_read_wait+0x38>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     938:	2302      	movs	r3, #2
     93a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_FORMAT;
     93c:	3318      	adds	r3, #24
     93e:	e7e7      	b.n	910 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     940:	0758      	lsls	r0, r3, #29
     942:	d503      	bpl.n	94c <usart_read_wait+0x44>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     944:	2304      	movs	r3, #4
     946:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_OVERFLOW;
     948:	331a      	adds	r3, #26
     94a:	e7e1      	b.n	910 <usart_read_wait+0x8>
		} else if (error_code & SERCOM_USART_STATUS_PERR) {
     94c:	07d8      	lsls	r0, r3, #31
     94e:	d503      	bpl.n	958 <usart_read_wait+0x50>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     950:	2301      	movs	r3, #1
     952:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_BAD_DATA;
     954:	3312      	adds	r3, #18
     956:	e7db      	b.n	910 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_ISF) {
     958:	06d8      	lsls	r0, r3, #27
     95a:	d503      	bpl.n	964 <usart_read_wait+0x5c>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     95c:	2310      	movs	r3, #16
     95e:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PROTOCOL;
     960:	3332      	adds	r3, #50	; 0x32
     962:	e7d5      	b.n	910 <usart_read_wait+0x8>
		else if (error_code & SERCOM_USART_STATUS_COLL) {
     964:	069b      	lsls	r3, r3, #26
     966:	d503      	bpl.n	970 <usart_read_wait+0x68>
			usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     968:	2320      	movs	r3, #32
     96a:	8353      	strh	r3, [r2, #26]
			return STATUS_ERR_PACKET_COLLISION;
     96c:	3321      	adds	r3, #33	; 0x21
     96e:	e7cf      	b.n	910 <usart_read_wait+0x8>
	*rx_data = usart_hw->DATA.reg;
     970:	8d13      	ldrh	r3, [r2, #40]	; 0x28
     972:	800b      	strh	r3, [r1, #0]
	return STATUS_OK;
     974:	2300      	movs	r3, #0
     976:	e7cb      	b.n	910 <usart_read_wait+0x8>

00000978 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     97a:	0080      	lsls	r0, r0, #2
     97c:	4b62      	ldr	r3, [pc, #392]	; (b08 <_usart_interrupt_handler+0x190>)
     97e:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     980:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
     982:	69e3      	ldr	r3, [r4, #28]
	while (usart_is_syncing(module)) {
     984:	2b00      	cmp	r3, #0
     986:	d1fc      	bne.n	982 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     988:	7e23      	ldrb	r3, [r4, #24]
	interrupt_status &= usart_hw->INTENSET.reg;
     98a:	7da6      	ldrb	r6, [r4, #22]
     98c:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     98e:	2330      	movs	r3, #48	; 0x30
     990:	5ceb      	ldrb	r3, [r5, r3]
     992:	2231      	movs	r2, #49	; 0x31
     994:	5caf      	ldrb	r7, [r5, r2]
     996:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     998:	07f3      	lsls	r3, r6, #31
     99a:	d522      	bpl.n	9e2 <_usart_interrupt_handler+0x6a>
		if (module->remaining_tx_buffer_length) {
     99c:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     99e:	b29b      	uxth	r3, r3
     9a0:	2b00      	cmp	r3, #0
     9a2:	d01c      	beq.n	9de <_usart_interrupt_handler+0x66>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9a4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
     9a6:	7813      	ldrb	r3, [r2, #0]
     9a8:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     9aa:	1c51      	adds	r1, r2, #1
     9ac:	62a9      	str	r1, [r5, #40]	; 0x28

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     9ae:	7969      	ldrb	r1, [r5, #5]
     9b0:	2901      	cmp	r1, #1
     9b2:	d00e      	beq.n	9d2 <_usart_interrupt_handler+0x5a>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     9b4:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     9b6:	05db      	lsls	r3, r3, #23
     9b8:	0ddb      	lsrs	r3, r3, #23
     9ba:	8523      	strh	r3, [r4, #40]	; 0x28

			if (--(module->remaining_tx_buffer_length) == 0) {
     9bc:	8deb      	ldrh	r3, [r5, #46]	; 0x2e
     9be:	3b01      	subs	r3, #1
     9c0:	b29b      	uxth	r3, r3
     9c2:	85eb      	strh	r3, [r5, #46]	; 0x2e
     9c4:	2b00      	cmp	r3, #0
     9c6:	d10c      	bne.n	9e2 <_usart_interrupt_handler+0x6a>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9c8:	3301      	adds	r3, #1
     9ca:	7523      	strb	r3, [r4, #20]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     9cc:	3301      	adds	r3, #1
     9ce:	75a3      	strb	r3, [r4, #22]
     9d0:	e007      	b.n	9e2 <_usart_interrupt_handler+0x6a>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     9d2:	7851      	ldrb	r1, [r2, #1]
     9d4:	0209      	lsls	r1, r1, #8
     9d6:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     9d8:	3202      	adds	r2, #2
     9da:	62aa      	str	r2, [r5, #40]	; 0x28
     9dc:	e7eb      	b.n	9b6 <_usart_interrupt_handler+0x3e>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     9de:	2301      	movs	r3, #1
     9e0:	7523      	strb	r3, [r4, #20]

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     9e2:	07b3      	lsls	r3, r6, #30
     9e4:	d506      	bpl.n	9f4 <_usart_interrupt_handler+0x7c>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     9e6:	2302      	movs	r3, #2
     9e8:	7523      	strb	r3, [r4, #20]
		module->tx_status = STATUS_OK;
     9ea:	2200      	movs	r2, #0
     9ec:	3331      	adds	r3, #49	; 0x31
     9ee:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     9f0:	07fb      	lsls	r3, r7, #31
     9f2:	d41a      	bmi.n	a2a <_usart_interrupt_handler+0xb2>

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	}

	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     9f4:	0773      	lsls	r3, r6, #29
     9f6:	d565      	bpl.n	ac4 <_usart_interrupt_handler+0x14c>

		if (module->remaining_rx_buffer_length) {
     9f8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     9fa:	b29b      	uxth	r3, r3
     9fc:	2b00      	cmp	r3, #0
     9fe:	d05f      	beq.n	ac0 <_usart_interrupt_handler+0x148>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a00:	8b63      	ldrh	r3, [r4, #26]
     a02:	b2db      	uxtb	r3, r3
#if !SAMD20
			/* CTS status should not be considered as an error */
			if(error_code & SERCOM_USART_STATUS_CTS) {
     a04:	071a      	lsls	r2, r3, #28
     a06:	d414      	bmi.n	a32 <_usart_interrupt_handler+0xba>
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     a08:	223f      	movs	r2, #63	; 0x3f
     a0a:	4013      	ands	r3, r2
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     a0c:	2b00      	cmp	r3, #0
     a0e:	d034      	beq.n	a7a <_usart_interrupt_handler+0x102>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     a10:	079a      	lsls	r2, r3, #30
     a12:	d511      	bpl.n	a38 <_usart_interrupt_handler+0xc0>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     a14:	221a      	movs	r2, #26
     a16:	2332      	movs	r3, #50	; 0x32
     a18:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     a1a:	3b30      	subs	r3, #48	; 0x30
     a1c:	8363      	strh	r3, [r4, #26]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     a1e:	077b      	lsls	r3, r7, #29
     a20:	d550      	bpl.n	ac4 <_usart_interrupt_handler+0x14c>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     a22:	0028      	movs	r0, r5
     a24:	696b      	ldr	r3, [r5, #20]
     a26:	4798      	blx	r3
     a28:	e04c      	b.n	ac4 <_usart_interrupt_handler+0x14c>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     a2a:	0028      	movs	r0, r5
     a2c:	68eb      	ldr	r3, [r5, #12]
     a2e:	4798      	blx	r3
     a30:	e7e0      	b.n	9f4 <_usart_interrupt_handler+0x7c>
				error_code &= ~SERCOM_USART_STATUS_CTS;
     a32:	2237      	movs	r2, #55	; 0x37
     a34:	4013      	ands	r3, r2
     a36:	e7e9      	b.n	a0c <_usart_interrupt_handler+0x94>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     a38:	075a      	lsls	r2, r3, #29
     a3a:	d505      	bpl.n	a48 <_usart_interrupt_handler+0xd0>
					module->rx_status = STATUS_ERR_OVERFLOW;
     a3c:	221e      	movs	r2, #30
     a3e:	2332      	movs	r3, #50	; 0x32
     a40:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     a42:	3b2e      	subs	r3, #46	; 0x2e
     a44:	8363      	strh	r3, [r4, #26]
     a46:	e7ea      	b.n	a1e <_usart_interrupt_handler+0xa6>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     a48:	07da      	lsls	r2, r3, #31
     a4a:	d505      	bpl.n	a58 <_usart_interrupt_handler+0xe0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     a4c:	2213      	movs	r2, #19
     a4e:	2332      	movs	r3, #50	; 0x32
     a50:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     a52:	3b31      	subs	r3, #49	; 0x31
     a54:	8363      	strh	r3, [r4, #26]
     a56:	e7e2      	b.n	a1e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_ISF) {
     a58:	06da      	lsls	r2, r3, #27
     a5a:	d505      	bpl.n	a68 <_usart_interrupt_handler+0xf0>
					module->rx_status = STATUS_ERR_PROTOCOL;
     a5c:	2242      	movs	r2, #66	; 0x42
     a5e:	2332      	movs	r3, #50	; 0x32
     a60:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_ISF;
     a62:	3b22      	subs	r3, #34	; 0x22
     a64:	8363      	strh	r3, [r4, #26]
     a66:	e7da      	b.n	a1e <_usart_interrupt_handler+0xa6>
				else if (error_code & SERCOM_USART_STATUS_COLL) {
     a68:	2220      	movs	r2, #32
     a6a:	421a      	tst	r2, r3
     a6c:	d0d7      	beq.n	a1e <_usart_interrupt_handler+0xa6>
					module->rx_status = STATUS_ERR_PACKET_COLLISION;
     a6e:	3221      	adds	r2, #33	; 0x21
     a70:	2332      	movs	r3, #50	; 0x32
     a72:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
     a74:	3b12      	subs	r3, #18
     a76:	8363      	strh	r3, [r4, #26]
     a78:	e7d1      	b.n	a1e <_usart_interrupt_handler+0xa6>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     a7a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     a7c:	05db      	lsls	r3, r3, #23
     a7e:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     a80:	b2da      	uxtb	r2, r3
     a82:	6a69      	ldr	r1, [r5, #36]	; 0x24
     a84:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     a86:	6a6a      	ldr	r2, [r5, #36]	; 0x24
     a88:	1c51      	adds	r1, r2, #1
     a8a:	6269      	str	r1, [r5, #36]	; 0x24

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a8c:	7969      	ldrb	r1, [r5, #5]
     a8e:	2901      	cmp	r1, #1
     a90:	d010      	beq.n	ab4 <_usart_interrupt_handler+0x13c>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     a92:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
     a94:	3b01      	subs	r3, #1
     a96:	b29b      	uxth	r3, r3
     a98:	85ab      	strh	r3, [r5, #44]	; 0x2c
     a9a:	2b00      	cmp	r3, #0
     a9c:	d112      	bne.n	ac4 <_usart_interrupt_handler+0x14c>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     a9e:	3304      	adds	r3, #4
     aa0:	7523      	strb	r3, [r4, #20]
					module->rx_status = STATUS_OK;
     aa2:	2200      	movs	r2, #0
     aa4:	332e      	adds	r3, #46	; 0x2e
     aa6:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     aa8:	07bb      	lsls	r3, r7, #30
     aaa:	d50b      	bpl.n	ac4 <_usart_interrupt_handler+0x14c>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     aac:	0028      	movs	r0, r5
     aae:	692b      	ldr	r3, [r5, #16]
     ab0:	4798      	blx	r3
     ab2:	e007      	b.n	ac4 <_usart_interrupt_handler+0x14c>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     ab4:	0a1b      	lsrs	r3, r3, #8
     ab6:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     ab8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
     aba:	3301      	adds	r3, #1
     abc:	626b      	str	r3, [r5, #36]	; 0x24
     abe:	e7e8      	b.n	a92 <_usart_interrupt_handler+0x11a>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     ac0:	2304      	movs	r3, #4
     ac2:	7523      	strb	r3, [r4, #20]
		}
	}

#ifdef FEATURE_USART_HARDWARE_FLOW_CONTROL
	if (interrupt_status & SERCOM_USART_INTFLAG_CTSIC) {
     ac4:	06f3      	lsls	r3, r6, #27
     ac6:	d504      	bpl.n	ad2 <_usart_interrupt_handler+0x15a>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_CTSIC;
     ac8:	2310      	movs	r3, #16
     aca:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_CTSIC;
     acc:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_CTS_INPUT_CHANGE)) {
     ace:	06fb      	lsls	r3, r7, #27
     ad0:	d40e      	bmi.n	af0 <_usart_interrupt_handler+0x178>
		}
	}
#endif

#ifdef FEATURE_USART_LIN_SLAVE
	if (interrupt_status & SERCOM_USART_INTFLAG_RXBRK) {
     ad2:	06b3      	lsls	r3, r6, #26
     ad4:	d504      	bpl.n	ae0 <_usart_interrupt_handler+0x168>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXBRK;
     ad6:	2320      	movs	r3, #32
     ad8:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXBRK;
     ada:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BREAK_RECEIVED)) {
     adc:	073b      	lsls	r3, r7, #28
     ade:	d40b      	bmi.n	af8 <_usart_interrupt_handler+0x180>
		}
	}
#endif

#ifdef FEATURE_USART_START_FRAME_DECTION
	if (interrupt_status & SERCOM_USART_INTFLAG_RXS) {
     ae0:	0733      	lsls	r3, r6, #28
     ae2:	d504      	bpl.n	aee <_usart_interrupt_handler+0x176>
		/* Disable interrupts */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTENCLR_RXS;
     ae4:	2308      	movs	r3, #8
     ae6:	7523      	strb	r3, [r4, #20]
		/* Clear interrupt flag */
		usart_hw->INTFLAG.reg = SERCOM_USART_INTFLAG_RXS;
     ae8:	7623      	strb	r3, [r4, #24]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
     aea:	06bb      	lsls	r3, r7, #26
     aec:	d408      	bmi.n	b00 <_usart_interrupt_handler+0x188>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     aee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			(*(module->callback[USART_CALLBACK_CTS_INPUT_CHANGE]))(module);
     af0:	0028      	movs	r0, r5
     af2:	69eb      	ldr	r3, [r5, #28]
     af4:	4798      	blx	r3
     af6:	e7ec      	b.n	ad2 <_usart_interrupt_handler+0x15a>
			(*(module->callback[USART_CALLBACK_BREAK_RECEIVED]))(module);
     af8:	0028      	movs	r0, r5
     afa:	69ab      	ldr	r3, [r5, #24]
     afc:	4798      	blx	r3
     afe:	e7ef      	b.n	ae0 <_usart_interrupt_handler+0x168>
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
     b00:	6a2b      	ldr	r3, [r5, #32]
     b02:	0028      	movs	r0, r5
     b04:	4798      	blx	r3
}
     b06:	e7f2      	b.n	aee <_usart_interrupt_handler+0x176>
     b08:	200000d8 	.word	0x200000d8

00000b0c <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     b0c:	4770      	bx	lr
	...

00000b10 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     b10:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     b12:	4b0a      	ldr	r3, [pc, #40]	; (b3c <_sercom_set_handler+0x2c>)
     b14:	781b      	ldrb	r3, [r3, #0]
     b16:	2b00      	cmp	r3, #0
     b18:	d10c      	bne.n	b34 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b1a:	4f09      	ldr	r7, [pc, #36]	; (b40 <_sercom_set_handler+0x30>)
     b1c:	4e09      	ldr	r6, [pc, #36]	; (b44 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     b1e:	4d0a      	ldr	r5, [pc, #40]	; (b48 <_sercom_set_handler+0x38>)
     b20:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     b22:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     b24:	195a      	adds	r2, r3, r5
     b26:	6014      	str	r4, [r2, #0]
     b28:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     b2a:	2b18      	cmp	r3, #24
     b2c:	d1f9      	bne.n	b22 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     b2e:	2201      	movs	r2, #1
     b30:	4b02      	ldr	r3, [pc, #8]	; (b3c <_sercom_set_handler+0x2c>)
     b32:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     b34:	0080      	lsls	r0, r0, #2
     b36:	4b02      	ldr	r3, [pc, #8]	; (b40 <_sercom_set_handler+0x30>)
     b38:	50c1      	str	r1, [r0, r3]
}
     b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     b3c:	20000086 	.word	0x20000086
     b40:	20000088 	.word	0x20000088
     b44:	00000b0d 	.word	0x00000b0d
     b48:	200000d8 	.word	0x200000d8

00000b4c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     b4c:	b500      	push	{lr}
     b4e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     b50:	2309      	movs	r3, #9
     b52:	466a      	mov	r2, sp
     b54:	7013      	strb	r3, [r2, #0]
     b56:	3301      	adds	r3, #1
     b58:	7053      	strb	r3, [r2, #1]
     b5a:	3301      	adds	r3, #1
     b5c:	7093      	strb	r3, [r2, #2]
     b5e:	3301      	adds	r3, #1
     b60:	70d3      	strb	r3, [r2, #3]
     b62:	3301      	adds	r3, #1
     b64:	7113      	strb	r3, [r2, #4]
     b66:	3301      	adds	r3, #1
     b68:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     b6a:	4b03      	ldr	r3, [pc, #12]	; (b78 <_sercom_get_interrupt_vector+0x2c>)
     b6c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     b6e:	466b      	mov	r3, sp
     b70:	5618      	ldrsb	r0, [r3, r0]
}
     b72:	b003      	add	sp, #12
     b74:	bd00      	pop	{pc}
     b76:	46c0      	nop			; (mov r8, r8)
     b78:	000004d1 	.word	0x000004d1

00000b7c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     b7c:	b510      	push	{r4, lr}
     b7e:	4b02      	ldr	r3, [pc, #8]	; (b88 <SERCOM0_Handler+0xc>)
     b80:	681b      	ldr	r3, [r3, #0]
     b82:	2000      	movs	r0, #0
     b84:	4798      	blx	r3
     b86:	bd10      	pop	{r4, pc}
     b88:	20000088 	.word	0x20000088

00000b8c <SERCOM1_Handler>:
     b8c:	b510      	push	{r4, lr}
     b8e:	4b02      	ldr	r3, [pc, #8]	; (b98 <SERCOM1_Handler+0xc>)
     b90:	685b      	ldr	r3, [r3, #4]
     b92:	2001      	movs	r0, #1
     b94:	4798      	blx	r3
     b96:	bd10      	pop	{r4, pc}
     b98:	20000088 	.word	0x20000088

00000b9c <SERCOM2_Handler>:
     b9c:	b510      	push	{r4, lr}
     b9e:	4b02      	ldr	r3, [pc, #8]	; (ba8 <SERCOM2_Handler+0xc>)
     ba0:	689b      	ldr	r3, [r3, #8]
     ba2:	2002      	movs	r0, #2
     ba4:	4798      	blx	r3
     ba6:	bd10      	pop	{r4, pc}
     ba8:	20000088 	.word	0x20000088

00000bac <SERCOM3_Handler>:
     bac:	b510      	push	{r4, lr}
     bae:	4b02      	ldr	r3, [pc, #8]	; (bb8 <SERCOM3_Handler+0xc>)
     bb0:	68db      	ldr	r3, [r3, #12]
     bb2:	2003      	movs	r0, #3
     bb4:	4798      	blx	r3
     bb6:	bd10      	pop	{r4, pc}
     bb8:	20000088 	.word	0x20000088

00000bbc <SERCOM4_Handler>:
     bbc:	b510      	push	{r4, lr}
     bbe:	4b02      	ldr	r3, [pc, #8]	; (bc8 <SERCOM4_Handler+0xc>)
     bc0:	691b      	ldr	r3, [r3, #16]
     bc2:	2004      	movs	r0, #4
     bc4:	4798      	blx	r3
     bc6:	bd10      	pop	{r4, pc}
     bc8:	20000088 	.word	0x20000088

00000bcc <SERCOM5_Handler>:
     bcc:	b510      	push	{r4, lr}
     bce:	4b02      	ldr	r3, [pc, #8]	; (bd8 <SERCOM5_Handler+0xc>)
     bd0:	695b      	ldr	r3, [r3, #20]
     bd2:	2005      	movs	r0, #5
     bd4:	4798      	blx	r3
     bd6:	bd10      	pop	{r4, pc}
     bd8:	20000088 	.word	0x20000088

00000bdc <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     bdc:	4b0c      	ldr	r3, [pc, #48]	; (c10 <cpu_irq_enter_critical+0x34>)
     bde:	681b      	ldr	r3, [r3, #0]
     be0:	2b00      	cmp	r3, #0
     be2:	d106      	bne.n	bf2 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     be4:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     be8:	2b00      	cmp	r3, #0
     bea:	d007      	beq.n	bfc <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     bec:	2200      	movs	r2, #0
     bee:	4b09      	ldr	r3, [pc, #36]	; (c14 <cpu_irq_enter_critical+0x38>)
     bf0:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     bf2:	4a07      	ldr	r2, [pc, #28]	; (c10 <cpu_irq_enter_critical+0x34>)
     bf4:	6813      	ldr	r3, [r2, #0]
     bf6:	3301      	adds	r3, #1
     bf8:	6013      	str	r3, [r2, #0]
}
     bfa:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     bfc:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     bfe:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     c02:	2200      	movs	r2, #0
     c04:	4b04      	ldr	r3, [pc, #16]	; (c18 <cpu_irq_enter_critical+0x3c>)
     c06:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     c08:	3201      	adds	r2, #1
     c0a:	4b02      	ldr	r3, [pc, #8]	; (c14 <cpu_irq_enter_critical+0x38>)
     c0c:	701a      	strb	r2, [r3, #0]
     c0e:	e7f0      	b.n	bf2 <cpu_irq_enter_critical+0x16>
     c10:	200000a0 	.word	0x200000a0
     c14:	200000a4 	.word	0x200000a4
     c18:	20000000 	.word	0x20000000

00000c1c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     c1c:	4b08      	ldr	r3, [pc, #32]	; (c40 <cpu_irq_leave_critical+0x24>)
     c1e:	681a      	ldr	r2, [r3, #0]
     c20:	3a01      	subs	r2, #1
     c22:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     c24:	681b      	ldr	r3, [r3, #0]
     c26:	2b00      	cmp	r3, #0
     c28:	d109      	bne.n	c3e <cpu_irq_leave_critical+0x22>
     c2a:	4b06      	ldr	r3, [pc, #24]	; (c44 <cpu_irq_leave_critical+0x28>)
     c2c:	781b      	ldrb	r3, [r3, #0]
     c2e:	2b00      	cmp	r3, #0
     c30:	d005      	beq.n	c3e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     c32:	2201      	movs	r2, #1
     c34:	4b04      	ldr	r3, [pc, #16]	; (c48 <cpu_irq_leave_critical+0x2c>)
     c36:	701a      	strb	r2, [r3, #0]
     c38:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     c3c:	b662      	cpsie	i
	}
}
     c3e:	4770      	bx	lr
     c40:	200000a0 	.word	0x200000a0
     c44:	200000a4 	.word	0x200000a4
     c48:	20000000 	.word	0x20000000

00000c4c <system_board_init>:
void board_init(void);
#  pragma weak board_init=system_board_init
#endif

void system_board_init(void)
{
     c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4e:	b083      	sub	sp, #12
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
     c50:	ac01      	add	r4, sp, #4
     c52:	2501      	movs	r5, #1
     c54:	7065      	strb	r5, [r4, #1]
	config->powersave  = false;
     c56:	2700      	movs	r7, #0
     c58:	70a7      	strb	r7, [r4, #2]
	struct port_config pin_conf;
	port_get_config_defaults(&pin_conf);

	/* Configure LEDs as outputs, turn them off */
	pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     c5a:	7025      	strb	r5, [r4, #0]
	port_pin_set_config(LED_0_PIN, &pin_conf);
     c5c:	0021      	movs	r1, r4
     c5e:	203e      	movs	r0, #62	; 0x3e
     c60:	4e06      	ldr	r6, [pc, #24]	; (c7c <system_board_init+0x30>)
     c62:	47b0      	blx	r6
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     c64:	2280      	movs	r2, #128	; 0x80
     c66:	05d2      	lsls	r2, r2, #23
     c68:	4b05      	ldr	r3, [pc, #20]	; (c80 <system_board_init+0x34>)
     c6a:	619a      	str	r2, [r3, #24]
	port_pin_set_output_level(LED_0_PIN, LED_0_INACTIVE);

	/* Set buttons as inputs */
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
     c6c:	7027      	strb	r7, [r4, #0]
	pin_conf.input_pull = PORT_PIN_PULL_UP;
     c6e:	7065      	strb	r5, [r4, #1]
	port_pin_set_config(BUTTON_0_PIN, &pin_conf);
     c70:	0021      	movs	r1, r4
     c72:	200f      	movs	r0, #15
     c74:	47b0      	blx	r6
	port_pin_set_output_level(AT86RFX_RST_PIN, true);
	port_pin_set_output_level(AT86RFX_SLP_PIN, true);
	pin_conf.direction  = PORT_PIN_DIR_INPUT;
	port_pin_set_config(AT86RFX_SPI_MISO, &pin_conf);
#endif	
}
     c76:	b003      	add	sp, #12
     c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c7a:	46c0      	nop			; (mov r8, r8)
     c7c:	00000c85 	.word	0x00000c85
     c80:	41004480 	.word	0x41004480

00000c84 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     c84:	b500      	push	{lr}
     c86:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     c88:	ab01      	add	r3, sp, #4
     c8a:	2280      	movs	r2, #128	; 0x80
     c8c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     c8e:	780a      	ldrb	r2, [r1, #0]
     c90:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     c92:	784a      	ldrb	r2, [r1, #1]
     c94:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     c96:	788a      	ldrb	r2, [r1, #2]
     c98:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     c9a:	0019      	movs	r1, r3
     c9c:	4b01      	ldr	r3, [pc, #4]	; (ca4 <port_pin_set_config+0x20>)
     c9e:	4798      	blx	r3
}
     ca0:	b003      	add	sp, #12
     ca2:	bd00      	pop	{pc}
     ca4:	000011e5 	.word	0x000011e5

00000ca8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     ca8:	b510      	push	{r4, lr}
	switch (clock_source) {
     caa:	2808      	cmp	r0, #8
     cac:	d803      	bhi.n	cb6 <system_clock_source_get_hz+0xe>
     cae:	0080      	lsls	r0, r0, #2
     cb0:	4b1b      	ldr	r3, [pc, #108]	; (d20 <system_clock_source_get_hz+0x78>)
     cb2:	581b      	ldr	r3, [r3, r0]
     cb4:	469f      	mov	pc, r3

		return _system_clock_inst.dpll.frequency;
#endif

	default:
		return 0;
     cb6:	2000      	movs	r0, #0
     cb8:	e030      	b.n	d1c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc.frequency;
     cba:	4b1a      	ldr	r3, [pc, #104]	; (d24 <system_clock_source_get_hz+0x7c>)
     cbc:	6918      	ldr	r0, [r3, #16]
     cbe:	e02d      	b.n	d1c <system_clock_source_get_hz+0x74>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     cc0:	4b19      	ldr	r3, [pc, #100]	; (d28 <system_clock_source_get_hz+0x80>)
     cc2:	6a1b      	ldr	r3, [r3, #32]
     cc4:	059b      	lsls	r3, r3, #22
     cc6:	0f9b      	lsrs	r3, r3, #30
     cc8:	4818      	ldr	r0, [pc, #96]	; (d2c <system_clock_source_get_hz+0x84>)
     cca:	40d8      	lsrs	r0, r3
     ccc:	e026      	b.n	d1c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.xosc32k.frequency;
     cce:	4b15      	ldr	r3, [pc, #84]	; (d24 <system_clock_source_get_hz+0x7c>)
     cd0:	6958      	ldr	r0, [r3, #20]
     cd2:	e023      	b.n	d1c <system_clock_source_get_hz+0x74>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cd4:	4b13      	ldr	r3, [pc, #76]	; (d24 <system_clock_source_get_hz+0x7c>)
     cd6:	681b      	ldr	r3, [r3, #0]
			return 0;
     cd8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     cda:	079b      	lsls	r3, r3, #30
     cdc:	d51e      	bpl.n	d1c <system_clock_source_get_hz+0x74>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     cde:	4912      	ldr	r1, [pc, #72]	; (d28 <system_clock_source_get_hz+0x80>)
     ce0:	2210      	movs	r2, #16
     ce2:	68cb      	ldr	r3, [r1, #12]
     ce4:	421a      	tst	r2, r3
     ce6:	d0fc      	beq.n	ce2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     ce8:	4b0e      	ldr	r3, [pc, #56]	; (d24 <system_clock_source_get_hz+0x7c>)
     cea:	681b      	ldr	r3, [r3, #0]
     cec:	075b      	lsls	r3, r3, #29
     cee:	d401      	bmi.n	cf4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     cf0:	480f      	ldr	r0, [pc, #60]	; (d30 <system_clock_source_get_hz+0x88>)
     cf2:	e013      	b.n	d1c <system_clock_source_get_hz+0x74>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     cf4:	2000      	movs	r0, #0
     cf6:	4b0f      	ldr	r3, [pc, #60]	; (d34 <system_clock_source_get_hz+0x8c>)
     cf8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     cfa:	4b0a      	ldr	r3, [pc, #40]	; (d24 <system_clock_source_get_hz+0x7c>)
     cfc:	689b      	ldr	r3, [r3, #8]
     cfe:	041b      	lsls	r3, r3, #16
     d00:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     d02:	4358      	muls	r0, r3
     d04:	e00a      	b.n	d1c <system_clock_source_get_hz+0x74>
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d06:	2350      	movs	r3, #80	; 0x50
     d08:	4a07      	ldr	r2, [pc, #28]	; (d28 <system_clock_source_get_hz+0x80>)
     d0a:	5cd3      	ldrb	r3, [r2, r3]
			return 0;
     d0c:	2000      	movs	r0, #0
		if (!(SYSCTRL->DPLLSTATUS.reg & SYSCTRL_DPLLSTATUS_ENABLE)) {
     d0e:	075b      	lsls	r3, r3, #29
     d10:	d504      	bpl.n	d1c <system_clock_source_get_hz+0x74>
		return _system_clock_inst.dpll.frequency;
     d12:	4b04      	ldr	r3, [pc, #16]	; (d24 <system_clock_source_get_hz+0x7c>)
     d14:	68d8      	ldr	r0, [r3, #12]
     d16:	e001      	b.n	d1c <system_clock_source_get_hz+0x74>
		return 32768UL;
     d18:	2080      	movs	r0, #128	; 0x80
     d1a:	0200      	lsls	r0, r0, #8
	}
}
     d1c:	bd10      	pop	{r4, pc}
     d1e:	46c0      	nop			; (mov r8, r8)
     d20:	00002190 	.word	0x00002190
     d24:	200000a8 	.word	0x200000a8
     d28:	40000800 	.word	0x40000800
     d2c:	007a1200 	.word	0x007a1200
     d30:	02dc6c00 	.word	0x02dc6c00
     d34:	00001109 	.word	0x00001109

00000d38 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     d38:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     d3a:	490c      	ldr	r1, [pc, #48]	; (d6c <system_clock_source_osc8m_set_config+0x34>)
     d3c:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     d3e:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     d40:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     d42:	7840      	ldrb	r0, [r0, #1]
     d44:	2201      	movs	r2, #1
     d46:	4010      	ands	r0, r2
     d48:	0180      	lsls	r0, r0, #6
     d4a:	2640      	movs	r6, #64	; 0x40
     d4c:	43b3      	bics	r3, r6
     d4e:	4303      	orrs	r3, r0
     d50:	402a      	ands	r2, r5
     d52:	01d2      	lsls	r2, r2, #7
     d54:	2080      	movs	r0, #128	; 0x80
     d56:	4383      	bics	r3, r0
     d58:	4313      	orrs	r3, r2
     d5a:	2203      	movs	r2, #3
     d5c:	4022      	ands	r2, r4
     d5e:	0212      	lsls	r2, r2, #8
     d60:	4803      	ldr	r0, [pc, #12]	; (d70 <system_clock_source_osc8m_set_config+0x38>)
     d62:	4003      	ands	r3, r0
     d64:	4313      	orrs	r3, r2
     d66:	620b      	str	r3, [r1, #32]
}
     d68:	bd70      	pop	{r4, r5, r6, pc}
     d6a:	46c0      	nop			; (mov r8, r8)
     d6c:	40000800 	.word	0x40000800
     d70:	fffffcff 	.word	0xfffffcff

00000d74 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     d74:	2808      	cmp	r0, #8
     d76:	d803      	bhi.n	d80 <system_clock_source_enable+0xc>
     d78:	0080      	lsls	r0, r0, #2
     d7a:	4b25      	ldr	r3, [pc, #148]	; (e10 <system_clock_source_enable+0x9c>)
     d7c:	581b      	ldr	r3, [r3, r0]
     d7e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     d80:	2017      	movs	r0, #23
     d82:	e044      	b.n	e0e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     d84:	4a23      	ldr	r2, [pc, #140]	; (e14 <system_clock_source_enable+0xa0>)
     d86:	6a13      	ldr	r3, [r2, #32]
     d88:	2102      	movs	r1, #2
     d8a:	430b      	orrs	r3, r1
     d8c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     d8e:	2000      	movs	r0, #0
     d90:	e03d      	b.n	e0e <system_clock_source_enable+0x9a>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     d92:	4a20      	ldr	r2, [pc, #128]	; (e14 <system_clock_source_enable+0xa0>)
     d94:	6993      	ldr	r3, [r2, #24]
     d96:	2102      	movs	r1, #2
     d98:	430b      	orrs	r3, r1
     d9a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     d9c:	2000      	movs	r0, #0
		break;
     d9e:	e036      	b.n	e0e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     da0:	4a1c      	ldr	r2, [pc, #112]	; (e14 <system_clock_source_enable+0xa0>)
     da2:	8a13      	ldrh	r3, [r2, #16]
     da4:	2102      	movs	r1, #2
     da6:	430b      	orrs	r3, r1
     da8:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     daa:	2000      	movs	r0, #0
		break;
     dac:	e02f      	b.n	e0e <system_clock_source_enable+0x9a>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     dae:	4a19      	ldr	r2, [pc, #100]	; (e14 <system_clock_source_enable+0xa0>)
     db0:	8a93      	ldrh	r3, [r2, #20]
     db2:	2102      	movs	r1, #2
     db4:	430b      	orrs	r3, r1
     db6:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     db8:	2000      	movs	r0, #0
		break;
     dba:	e028      	b.n	e0e <system_clock_source_enable+0x9a>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     dbc:	4916      	ldr	r1, [pc, #88]	; (e18 <system_clock_source_enable+0xa4>)
     dbe:	680b      	ldr	r3, [r1, #0]
     dc0:	2202      	movs	r2, #2
     dc2:	4313      	orrs	r3, r2
     dc4:	600b      	str	r3, [r1, #0]
	SYSCTRL->DFLLCTRL.reg = SYSCTRL_DFLLCTRL_ENABLE;
     dc6:	4b13      	ldr	r3, [pc, #76]	; (e14 <system_clock_source_enable+0xa0>)
     dc8:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     dca:	0019      	movs	r1, r3
     dcc:	320e      	adds	r2, #14
     dce:	68cb      	ldr	r3, [r1, #12]
     dd0:	421a      	tst	r2, r3
     dd2:	d0fc      	beq.n	dce <system_clock_source_enable+0x5a>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     dd4:	4a10      	ldr	r2, [pc, #64]	; (e18 <system_clock_source_enable+0xa4>)
     dd6:	6891      	ldr	r1, [r2, #8]
     dd8:	4b0e      	ldr	r3, [pc, #56]	; (e14 <system_clock_source_enable+0xa0>)
     dda:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     ddc:	6852      	ldr	r2, [r2, #4]
     dde:	629a      	str	r2, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = 0;
     de0:	2200      	movs	r2, #0
     de2:	849a      	strh	r2, [r3, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     de4:	0019      	movs	r1, r3
     de6:	3210      	adds	r2, #16
     de8:	68cb      	ldr	r3, [r1, #12]
     dea:	421a      	tst	r2, r3
     dec:	d0fc      	beq.n	de8 <system_clock_source_enable+0x74>
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     dee:	4b0a      	ldr	r3, [pc, #40]	; (e18 <system_clock_source_enable+0xa4>)
     df0:	681b      	ldr	r3, [r3, #0]
     df2:	b29b      	uxth	r3, r3
     df4:	4a07      	ldr	r2, [pc, #28]	; (e14 <system_clock_source_enable+0xa0>)
     df6:	8493      	strh	r3, [r2, #36]	; 0x24
	return STATUS_OK;
     df8:	2000      	movs	r0, #0
     dfa:	e008      	b.n	e0e <system_clock_source_enable+0x9a>
		SYSCTRL->DPLLCTRLA.reg |= SYSCTRL_DPLLCTRLA_ENABLE;
     dfc:	4905      	ldr	r1, [pc, #20]	; (e14 <system_clock_source_enable+0xa0>)
     dfe:	2244      	movs	r2, #68	; 0x44
     e00:	5c8b      	ldrb	r3, [r1, r2]
     e02:	2002      	movs	r0, #2
     e04:	4303      	orrs	r3, r0
     e06:	548b      	strb	r3, [r1, r2]
	return STATUS_OK;
     e08:	2000      	movs	r0, #0
		break;
     e0a:	e000      	b.n	e0e <system_clock_source_enable+0x9a>
		return STATUS_OK;
     e0c:	2000      	movs	r0, #0
}
     e0e:	4770      	bx	lr
     e10:	000021b4 	.word	0x000021b4
     e14:	40000800 	.word	0x40000800
     e18:	200000a8 	.word	0x200000a8

00000e1c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     e1c:	b530      	push	{r4, r5, lr}
     e1e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     e20:	22c2      	movs	r2, #194	; 0xc2
     e22:	00d2      	lsls	r2, r2, #3
     e24:	4b1a      	ldr	r3, [pc, #104]	; (e90 <system_clock_init+0x74>)
     e26:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     e28:	4a1a      	ldr	r2, [pc, #104]	; (e94 <system_clock_init+0x78>)
     e2a:	6853      	ldr	r3, [r2, #4]
     e2c:	211e      	movs	r1, #30
     e2e:	438b      	bics	r3, r1
     e30:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
     e32:	2301      	movs	r3, #1
     e34:	466a      	mov	r2, sp
     e36:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e38:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     e3a:	4d17      	ldr	r5, [pc, #92]	; (e98 <system_clock_init+0x7c>)
     e3c:	b2e0      	uxtb	r0, r4
     e3e:	4669      	mov	r1, sp
     e40:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     e42:	3401      	adds	r4, #1
     e44:	2c25      	cmp	r4, #37	; 0x25
     e46:	d1f9      	bne.n	e3c <system_clock_init+0x20>
	config->run_in_standby  = false;
     e48:	a803      	add	r0, sp, #12
     e4a:	2400      	movs	r4, #0
     e4c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
     e4e:	2501      	movs	r5, #1
     e50:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     e52:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
     e54:	4b11      	ldr	r3, [pc, #68]	; (e9c <system_clock_init+0x80>)
     e56:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     e58:	2006      	movs	r0, #6
     e5a:	4b11      	ldr	r3, [pc, #68]	; (ea0 <system_clock_init+0x84>)
     e5c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     e5e:	4b11      	ldr	r3, [pc, #68]	; (ea4 <system_clock_init+0x88>)
     e60:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
     e62:	4b11      	ldr	r3, [pc, #68]	; (ea8 <system_clock_init+0x8c>)
     e64:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
     e66:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
     e68:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
     e6a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
     e6c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
     e6e:	466b      	mov	r3, sp
     e70:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     e72:	2306      	movs	r3, #6
     e74:	466a      	mov	r2, sp
     e76:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
     e78:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
     e7a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     e7c:	4669      	mov	r1, sp
     e7e:	2000      	movs	r0, #0
     e80:	4b0a      	ldr	r3, [pc, #40]	; (eac <system_clock_init+0x90>)
     e82:	4798      	blx	r3
     e84:	2000      	movs	r0, #0
     e86:	4b0a      	ldr	r3, [pc, #40]	; (eb0 <system_clock_init+0x94>)
     e88:	4798      	blx	r3
#endif
}
     e8a:	b005      	add	sp, #20
     e8c:	bd30      	pop	{r4, r5, pc}
     e8e:	46c0      	nop			; (mov r8, r8)
     e90:	40000800 	.word	0x40000800
     e94:	41004000 	.word	0x41004000
     e98:	000010ed 	.word	0x000010ed
     e9c:	00000d39 	.word	0x00000d39
     ea0:	00000d75 	.word	0x00000d75
     ea4:	00000eb5 	.word	0x00000eb5
     ea8:	40000400 	.word	0x40000400
     eac:	00000ed9 	.word	0x00000ed9
     eb0:	00000f91 	.word	0x00000f91

00000eb4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
     eb4:	4a06      	ldr	r2, [pc, #24]	; (ed0 <system_gclk_init+0x1c>)
     eb6:	6993      	ldr	r3, [r2, #24]
     eb8:	2108      	movs	r1, #8
     eba:	430b      	orrs	r3, r1
     ebc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     ebe:	2201      	movs	r2, #1
     ec0:	4b04      	ldr	r3, [pc, #16]	; (ed4 <system_gclk_init+0x20>)
     ec2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     ec4:	0019      	movs	r1, r3
     ec6:	780b      	ldrb	r3, [r1, #0]
     ec8:	4213      	tst	r3, r2
     eca:	d1fc      	bne.n	ec6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     ecc:	4770      	bx	lr
     ece:	46c0      	nop			; (mov r8, r8)
     ed0:	40000400 	.word	0x40000400
     ed4:	40000c00 	.word	0x40000c00

00000ed8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     ed8:	b570      	push	{r4, r5, r6, lr}
     eda:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     edc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     ede:	780d      	ldrb	r5, [r1, #0]
     ee0:	022d      	lsls	r5, r5, #8
     ee2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     ee4:	784b      	ldrb	r3, [r1, #1]
     ee6:	2b00      	cmp	r3, #0
     ee8:	d002      	beq.n	ef0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     eea:	2380      	movs	r3, #128	; 0x80
     eec:	02db      	lsls	r3, r3, #11
     eee:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     ef0:	7a4b      	ldrb	r3, [r1, #9]
     ef2:	2b00      	cmp	r3, #0
     ef4:	d002      	beq.n	efc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     ef6:	2380      	movs	r3, #128	; 0x80
     ef8:	031b      	lsls	r3, r3, #12
     efa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     efc:	6848      	ldr	r0, [r1, #4]
     efe:	2801      	cmp	r0, #1
     f00:	d910      	bls.n	f24 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     f02:	1e43      	subs	r3, r0, #1
     f04:	4218      	tst	r0, r3
     f06:	d134      	bne.n	f72 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     f08:	2802      	cmp	r0, #2
     f0a:	d930      	bls.n	f6e <system_gclk_gen_set_config+0x96>
     f0c:	2302      	movs	r3, #2
     f0e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     f10:	3201      	adds	r2, #1
						mask <<= 1) {
     f12:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
     f14:	4298      	cmp	r0, r3
     f16:	d8fb      	bhi.n	f10 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     f18:	0212      	lsls	r2, r2, #8
     f1a:	4332      	orrs	r2, r6
     f1c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     f1e:	2380      	movs	r3, #128	; 0x80
     f20:	035b      	lsls	r3, r3, #13
     f22:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     f24:	7a0b      	ldrb	r3, [r1, #8]
     f26:	2b00      	cmp	r3, #0
     f28:	d002      	beq.n	f30 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     f2a:	2380      	movs	r3, #128	; 0x80
     f2c:	039b      	lsls	r3, r3, #14
     f2e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f30:	4a13      	ldr	r2, [pc, #76]	; (f80 <system_gclk_gen_set_config+0xa8>)
     f32:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
     f34:	b25b      	sxtb	r3, r3
     f36:	2b00      	cmp	r3, #0
     f38:	dbfb      	blt.n	f32 <system_gclk_gen_set_config+0x5a>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f3a:	4b12      	ldr	r3, [pc, #72]	; (f84 <system_gclk_gen_set_config+0xac>)
     f3c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     f3e:	4b12      	ldr	r3, [pc, #72]	; (f88 <system_gclk_gen_set_config+0xb0>)
     f40:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f42:	4a0f      	ldr	r2, [pc, #60]	; (f80 <system_gclk_gen_set_config+0xa8>)
     f44:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     f46:	b25b      	sxtb	r3, r3
     f48:	2b00      	cmp	r3, #0
     f4a:	dbfb      	blt.n	f44 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     f4c:	4b0c      	ldr	r3, [pc, #48]	; (f80 <system_gclk_gen_set_config+0xa8>)
     f4e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f50:	001a      	movs	r2, r3
     f52:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
     f54:	b25b      	sxtb	r3, r3
     f56:	2b00      	cmp	r3, #0
     f58:	dbfb      	blt.n	f52 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     f5a:	4a09      	ldr	r2, [pc, #36]	; (f80 <system_gclk_gen_set_config+0xa8>)
     f5c:	6853      	ldr	r3, [r2, #4]
     f5e:	2180      	movs	r1, #128	; 0x80
     f60:	0249      	lsls	r1, r1, #9
     f62:	400b      	ands	r3, r1
     f64:	431d      	orrs	r5, r3
     f66:	6055      	str	r5, [r2, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f68:	4b08      	ldr	r3, [pc, #32]	; (f8c <system_gclk_gen_set_config+0xb4>)
     f6a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f6c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
     f6e:	2200      	movs	r2, #0
     f70:	e7d2      	b.n	f18 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     f72:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
     f74:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     f76:	2380      	movs	r3, #128	; 0x80
     f78:	029b      	lsls	r3, r3, #10
     f7a:	431d      	orrs	r5, r3
     f7c:	e7d2      	b.n	f24 <system_gclk_gen_set_config+0x4c>
     f7e:	46c0      	nop			; (mov r8, r8)
     f80:	40000c00 	.word	0x40000c00
     f84:	00000bdd 	.word	0x00000bdd
     f88:	40000c08 	.word	0x40000c08
     f8c:	00000c1d 	.word	0x00000c1d

00000f90 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     f90:	b510      	push	{r4, lr}
     f92:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f94:	4a0b      	ldr	r2, [pc, #44]	; (fc4 <system_gclk_gen_enable+0x34>)
     f96:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     f98:	b25b      	sxtb	r3, r3
     f9a:	2b00      	cmp	r3, #0
     f9c:	dbfb      	blt.n	f96 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
     f9e:	4b0a      	ldr	r3, [pc, #40]	; (fc8 <system_gclk_gen_enable+0x38>)
     fa0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fa2:	4b0a      	ldr	r3, [pc, #40]	; (fcc <system_gclk_gen_enable+0x3c>)
     fa4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fa6:	4a07      	ldr	r2, [pc, #28]	; (fc4 <system_gclk_gen_enable+0x34>)
     fa8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     faa:	b25b      	sxtb	r3, r3
     fac:	2b00      	cmp	r3, #0
     fae:	dbfb      	blt.n	fa8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     fb0:	4a04      	ldr	r2, [pc, #16]	; (fc4 <system_gclk_gen_enable+0x34>)
     fb2:	6851      	ldr	r1, [r2, #4]
     fb4:	2380      	movs	r3, #128	; 0x80
     fb6:	025b      	lsls	r3, r3, #9
     fb8:	430b      	orrs	r3, r1
     fba:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
     fbc:	4b04      	ldr	r3, [pc, #16]	; (fd0 <system_gclk_gen_enable+0x40>)
     fbe:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fc0:	bd10      	pop	{r4, pc}
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	40000c00 	.word	0x40000c00
     fc8:	00000bdd 	.word	0x00000bdd
     fcc:	40000c04 	.word	0x40000c04
     fd0:	00000c1d 	.word	0x00000c1d

00000fd4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
     fd4:	b570      	push	{r4, r5, r6, lr}
     fd6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fd8:	4a1a      	ldr	r2, [pc, #104]	; (1044 <system_gclk_gen_get_hz+0x70>)
     fda:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fdc:	b25b      	sxtb	r3, r3
     fde:	2b00      	cmp	r3, #0
     fe0:	dbfb      	blt.n	fda <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
     fe2:	4b19      	ldr	r3, [pc, #100]	; (1048 <system_gclk_gen_get_hz+0x74>)
     fe4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     fe6:	4b19      	ldr	r3, [pc, #100]	; (104c <system_gclk_gen_get_hz+0x78>)
     fe8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     fea:	4a16      	ldr	r2, [pc, #88]	; (1044 <system_gclk_gen_get_hz+0x70>)
     fec:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
     fee:	b25b      	sxtb	r3, r3
     ff0:	2b00      	cmp	r3, #0
     ff2:	dbfb      	blt.n	fec <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
     ff4:	4e13      	ldr	r6, [pc, #76]	; (1044 <system_gclk_gen_get_hz+0x70>)
     ff6:	6870      	ldr	r0, [r6, #4]
     ff8:	04c0      	lsls	r0, r0, #19
     ffa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
     ffc:	4b14      	ldr	r3, [pc, #80]	; (1050 <system_gclk_gen_get_hz+0x7c>)
     ffe:	4798      	blx	r3
    1000:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1002:	4b12      	ldr	r3, [pc, #72]	; (104c <system_gclk_gen_get_hz+0x78>)
    1004:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1006:	6876      	ldr	r6, [r6, #4]
    1008:	02f6      	lsls	r6, r6, #11
    100a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    100c:	4b11      	ldr	r3, [pc, #68]	; (1054 <system_gclk_gen_get_hz+0x80>)
    100e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1010:	4a0c      	ldr	r2, [pc, #48]	; (1044 <system_gclk_gen_get_hz+0x70>)
    1012:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1014:	b25b      	sxtb	r3, r3
    1016:	2b00      	cmp	r3, #0
    1018:	dbfb      	blt.n	1012 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    101a:	4b0a      	ldr	r3, [pc, #40]	; (1044 <system_gclk_gen_get_hz+0x70>)
    101c:	689c      	ldr	r4, [r3, #8]
    101e:	0224      	lsls	r4, r4, #8
    1020:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1022:	4b0d      	ldr	r3, [pc, #52]	; (1058 <system_gclk_gen_get_hz+0x84>)
    1024:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1026:	2e00      	cmp	r6, #0
    1028:	d107      	bne.n	103a <system_gclk_gen_get_hz+0x66>
    102a:	2c01      	cmp	r4, #1
    102c:	d907      	bls.n	103e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    102e:	0021      	movs	r1, r4
    1030:	0028      	movs	r0, r5
    1032:	4b0a      	ldr	r3, [pc, #40]	; (105c <system_gclk_gen_get_hz+0x88>)
    1034:	4798      	blx	r3
    1036:	0005      	movs	r5, r0
    1038:	e001      	b.n	103e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    103a:	3401      	adds	r4, #1
    103c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    103e:	0028      	movs	r0, r5
    1040:	bd70      	pop	{r4, r5, r6, pc}
    1042:	46c0      	nop			; (mov r8, r8)
    1044:	40000c00 	.word	0x40000c00
    1048:	00000bdd 	.word	0x00000bdd
    104c:	40000c04 	.word	0x40000c04
    1050:	00000ca9 	.word	0x00000ca9
    1054:	40000c08 	.word	0x40000c08
    1058:	00000c1d 	.word	0x00000c1d
    105c:	000014e1 	.word	0x000014e1

00001060 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1060:	b510      	push	{r4, lr}
    1062:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1064:	4b06      	ldr	r3, [pc, #24]	; (1080 <system_gclk_chan_enable+0x20>)
    1066:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1068:	4b06      	ldr	r3, [pc, #24]	; (1084 <system_gclk_chan_enable+0x24>)
    106a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    106c:	4a06      	ldr	r2, [pc, #24]	; (1088 <system_gclk_chan_enable+0x28>)
    106e:	8853      	ldrh	r3, [r2, #2]
    1070:	2180      	movs	r1, #128	; 0x80
    1072:	01c9      	lsls	r1, r1, #7
    1074:	430b      	orrs	r3, r1
    1076:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1078:	4b04      	ldr	r3, [pc, #16]	; (108c <system_gclk_chan_enable+0x2c>)
    107a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    107c:	bd10      	pop	{r4, pc}
    107e:	46c0      	nop			; (mov r8, r8)
    1080:	00000bdd 	.word	0x00000bdd
    1084:	40000c02 	.word	0x40000c02
    1088:	40000c00 	.word	0x40000c00
    108c:	00000c1d 	.word	0x00000c1d

00001090 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1090:	b510      	push	{r4, lr}
    1092:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1094:	4b0f      	ldr	r3, [pc, #60]	; (10d4 <system_gclk_chan_disable+0x44>)
    1096:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1098:	4b0f      	ldr	r3, [pc, #60]	; (10d8 <system_gclk_chan_disable+0x48>)
    109a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    109c:	4a0f      	ldr	r2, [pc, #60]	; (10dc <system_gclk_chan_disable+0x4c>)
    109e:	8853      	ldrh	r3, [r2, #2]
    10a0:	051b      	lsls	r3, r3, #20
    10a2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    10a4:	8853      	ldrh	r3, [r2, #2]
    10a6:	490e      	ldr	r1, [pc, #56]	; (10e0 <system_gclk_chan_disable+0x50>)
    10a8:	400b      	ands	r3, r1
    10aa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    10ac:	8853      	ldrh	r3, [r2, #2]
    10ae:	490d      	ldr	r1, [pc, #52]	; (10e4 <system_gclk_chan_disable+0x54>)
    10b0:	400b      	ands	r3, r1
    10b2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    10b4:	0011      	movs	r1, r2
    10b6:	2280      	movs	r2, #128	; 0x80
    10b8:	01d2      	lsls	r2, r2, #7
    10ba:	884b      	ldrh	r3, [r1, #2]
    10bc:	4213      	tst	r3, r2
    10be:	d1fc      	bne.n	10ba <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    10c0:	4906      	ldr	r1, [pc, #24]	; (10dc <system_gclk_chan_disable+0x4c>)
    10c2:	884a      	ldrh	r2, [r1, #2]
    10c4:	0203      	lsls	r3, r0, #8
    10c6:	4806      	ldr	r0, [pc, #24]	; (10e0 <system_gclk_chan_disable+0x50>)
    10c8:	4002      	ands	r2, r0
    10ca:	4313      	orrs	r3, r2
    10cc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    10ce:	4b06      	ldr	r3, [pc, #24]	; (10e8 <system_gclk_chan_disable+0x58>)
    10d0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    10d2:	bd10      	pop	{r4, pc}
    10d4:	00000bdd 	.word	0x00000bdd
    10d8:	40000c02 	.word	0x40000c02
    10dc:	40000c00 	.word	0x40000c00
    10e0:	fffff0ff 	.word	0xfffff0ff
    10e4:	ffffbfff 	.word	0xffffbfff
    10e8:	00000c1d 	.word	0x00000c1d

000010ec <system_gclk_chan_set_config>:
{
    10ec:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    10ee:	780c      	ldrb	r4, [r1, #0]
    10f0:	0224      	lsls	r4, r4, #8
    10f2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    10f4:	4b02      	ldr	r3, [pc, #8]	; (1100 <system_gclk_chan_set_config+0x14>)
    10f6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    10f8:	b2a4      	uxth	r4, r4
    10fa:	4b02      	ldr	r3, [pc, #8]	; (1104 <system_gclk_chan_set_config+0x18>)
    10fc:	805c      	strh	r4, [r3, #2]
}
    10fe:	bd10      	pop	{r4, pc}
    1100:	00001091 	.word	0x00001091
    1104:	40000c00 	.word	0x40000c00

00001108 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1108:	b510      	push	{r4, lr}
    110a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    110c:	4b06      	ldr	r3, [pc, #24]	; (1128 <system_gclk_chan_get_hz+0x20>)
    110e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1110:	4b06      	ldr	r3, [pc, #24]	; (112c <system_gclk_chan_get_hz+0x24>)
    1112:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1114:	4b06      	ldr	r3, [pc, #24]	; (1130 <system_gclk_chan_get_hz+0x28>)
    1116:	885c      	ldrh	r4, [r3, #2]
    1118:	0524      	lsls	r4, r4, #20
    111a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    111c:	4b05      	ldr	r3, [pc, #20]	; (1134 <system_gclk_chan_get_hz+0x2c>)
    111e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1120:	0020      	movs	r0, r4
    1122:	4b05      	ldr	r3, [pc, #20]	; (1138 <system_gclk_chan_get_hz+0x30>)
    1124:	4798      	blx	r3
}
    1126:	bd10      	pop	{r4, pc}
    1128:	00000bdd 	.word	0x00000bdd
    112c:	40000c02 	.word	0x40000c02
    1130:	40000c00 	.word	0x40000c00
    1134:	00000c1d 	.word	0x00000c1d
    1138:	00000fd5 	.word	0x00000fd5

0000113c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    113c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    113e:	78d3      	ldrb	r3, [r2, #3]
    1140:	2b00      	cmp	r3, #0
    1142:	d135      	bne.n	11b0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1144:	7813      	ldrb	r3, [r2, #0]
    1146:	2b80      	cmp	r3, #128	; 0x80
    1148:	d029      	beq.n	119e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    114a:	061b      	lsls	r3, r3, #24
    114c:	2480      	movs	r4, #128	; 0x80
    114e:	0264      	lsls	r4, r4, #9
    1150:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1152:	7854      	ldrb	r4, [r2, #1]
    1154:	2502      	movs	r5, #2
    1156:	43ac      	bics	r4, r5
    1158:	d106      	bne.n	1168 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    115a:	7894      	ldrb	r4, [r2, #2]
    115c:	2c00      	cmp	r4, #0
    115e:	d120      	bne.n	11a2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1160:	2480      	movs	r4, #128	; 0x80
    1162:	02a4      	lsls	r4, r4, #10
    1164:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1166:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1168:	7854      	ldrb	r4, [r2, #1]
    116a:	3c01      	subs	r4, #1
    116c:	2c01      	cmp	r4, #1
    116e:	d91c      	bls.n	11aa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1170:	040d      	lsls	r5, r1, #16
    1172:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1174:	24a0      	movs	r4, #160	; 0xa0
    1176:	05e4      	lsls	r4, r4, #23
    1178:	432c      	orrs	r4, r5
    117a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    117c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    117e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1180:	24d0      	movs	r4, #208	; 0xd0
    1182:	0624      	lsls	r4, r4, #24
    1184:	432c      	orrs	r4, r5
    1186:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1188:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    118a:	78d4      	ldrb	r4, [r2, #3]
    118c:	2c00      	cmp	r4, #0
    118e:	d122      	bne.n	11d6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1190:	035b      	lsls	r3, r3, #13
    1192:	d51c      	bpl.n	11ce <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1194:	7893      	ldrb	r3, [r2, #2]
    1196:	2b01      	cmp	r3, #1
    1198:	d01e      	beq.n	11d8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    119a:	6141      	str	r1, [r0, #20]
    119c:	e017      	b.n	11ce <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    119e:	2300      	movs	r3, #0
    11a0:	e7d7      	b.n	1152 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    11a2:	24c0      	movs	r4, #192	; 0xc0
    11a4:	02e4      	lsls	r4, r4, #11
    11a6:	4323      	orrs	r3, r4
    11a8:	e7dd      	b.n	1166 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    11aa:	4c0d      	ldr	r4, [pc, #52]	; (11e0 <_system_pinmux_config+0xa4>)
    11ac:	4023      	ands	r3, r4
    11ae:	e7df      	b.n	1170 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    11b0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    11b2:	040c      	lsls	r4, r1, #16
    11b4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    11b6:	23a0      	movs	r3, #160	; 0xa0
    11b8:	05db      	lsls	r3, r3, #23
    11ba:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11bc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    11be:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    11c0:	23d0      	movs	r3, #208	; 0xd0
    11c2:	061b      	lsls	r3, r3, #24
    11c4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    11c6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    11c8:	78d3      	ldrb	r3, [r2, #3]
    11ca:	2b00      	cmp	r3, #0
    11cc:	d103      	bne.n	11d6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    11ce:	7853      	ldrb	r3, [r2, #1]
    11d0:	3b01      	subs	r3, #1
    11d2:	2b01      	cmp	r3, #1
    11d4:	d902      	bls.n	11dc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    11d6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    11d8:	6181      	str	r1, [r0, #24]
    11da:	e7f8      	b.n	11ce <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    11dc:	6081      	str	r1, [r0, #8]
}
    11de:	e7fa      	b.n	11d6 <_system_pinmux_config+0x9a>
    11e0:	fffbffff 	.word	0xfffbffff

000011e4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    11e4:	b510      	push	{r4, lr}
    11e6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    11e8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    11ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    11ec:	2900      	cmp	r1, #0
    11ee:	d104      	bne.n	11fa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    11f0:	0943      	lsrs	r3, r0, #5
    11f2:	01db      	lsls	r3, r3, #7
    11f4:	4905      	ldr	r1, [pc, #20]	; (120c <system_pinmux_pin_set_config+0x28>)
    11f6:	468c      	mov	ip, r1
    11f8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    11fa:	241f      	movs	r4, #31
    11fc:	4020      	ands	r0, r4
    11fe:	2101      	movs	r1, #1
    1200:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1202:	0018      	movs	r0, r3
    1204:	4b02      	ldr	r3, [pc, #8]	; (1210 <system_pinmux_pin_set_config+0x2c>)
    1206:	4798      	blx	r3
}
    1208:	bd10      	pop	{r4, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	41004400 	.word	0x41004400
    1210:	0000113d 	.word	0x0000113d

00001214 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1214:	4770      	bx	lr
	...

00001218 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1218:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    121a:	4b05      	ldr	r3, [pc, #20]	; (1230 <system_init+0x18>)
    121c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    121e:	4b05      	ldr	r3, [pc, #20]	; (1234 <system_init+0x1c>)
    1220:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1222:	4b05      	ldr	r3, [pc, #20]	; (1238 <system_init+0x20>)
    1224:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1226:	4b05      	ldr	r3, [pc, #20]	; (123c <system_init+0x24>)
    1228:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    122a:	4b05      	ldr	r3, [pc, #20]	; (1240 <system_init+0x28>)
    122c:	4798      	blx	r3
}
    122e:	bd10      	pop	{r4, pc}
    1230:	00000e1d 	.word	0x00000e1d
    1234:	00000c4d 	.word	0x00000c4d
    1238:	00001215 	.word	0x00001215
    123c:	00001215 	.word	0x00001215
    1240:	00001215 	.word	0x00001215

00001244 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1244:	e7fe      	b.n	1244 <Dummy_Handler>
	...

00001248 <Reset_Handler>:
{
    1248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
    124a:	4a2a      	ldr	r2, [pc, #168]	; (12f4 <Reset_Handler+0xac>)
    124c:	4b2a      	ldr	r3, [pc, #168]	; (12f8 <Reset_Handler+0xb0>)
    124e:	429a      	cmp	r2, r3
    1250:	d011      	beq.n	1276 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1252:	001a      	movs	r2, r3
    1254:	4b29      	ldr	r3, [pc, #164]	; (12fc <Reset_Handler+0xb4>)
    1256:	429a      	cmp	r2, r3
    1258:	d20d      	bcs.n	1276 <Reset_Handler+0x2e>
    125a:	4a29      	ldr	r2, [pc, #164]	; (1300 <Reset_Handler+0xb8>)
    125c:	3303      	adds	r3, #3
    125e:	1a9b      	subs	r3, r3, r2
    1260:	089b      	lsrs	r3, r3, #2
    1262:	3301      	adds	r3, #1
    1264:	009b      	lsls	r3, r3, #2
    1266:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1268:	4823      	ldr	r0, [pc, #140]	; (12f8 <Reset_Handler+0xb0>)
    126a:	4922      	ldr	r1, [pc, #136]	; (12f4 <Reset_Handler+0xac>)
    126c:	588c      	ldr	r4, [r1, r2]
    126e:	5084      	str	r4, [r0, r2]
    1270:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1272:	429a      	cmp	r2, r3
    1274:	d1fa      	bne.n	126c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1276:	4a23      	ldr	r2, [pc, #140]	; (1304 <Reset_Handler+0xbc>)
    1278:	4b23      	ldr	r3, [pc, #140]	; (1308 <Reset_Handler+0xc0>)
    127a:	429a      	cmp	r2, r3
    127c:	d20a      	bcs.n	1294 <Reset_Handler+0x4c>
    127e:	43d3      	mvns	r3, r2
    1280:	4921      	ldr	r1, [pc, #132]	; (1308 <Reset_Handler+0xc0>)
    1282:	185b      	adds	r3, r3, r1
    1284:	2103      	movs	r1, #3
    1286:	438b      	bics	r3, r1
    1288:	3304      	adds	r3, #4
    128a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    128c:	2100      	movs	r1, #0
    128e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1290:	4293      	cmp	r3, r2
    1292:	d1fc      	bne.n	128e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1294:	4a1d      	ldr	r2, [pc, #116]	; (130c <Reset_Handler+0xc4>)
    1296:	21ff      	movs	r1, #255	; 0xff
    1298:	4b1d      	ldr	r3, [pc, #116]	; (1310 <Reset_Handler+0xc8>)
    129a:	438b      	bics	r3, r1
    129c:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
    129e:	39fd      	subs	r1, #253	; 0xfd
    12a0:	2390      	movs	r3, #144	; 0x90
    12a2:	005b      	lsls	r3, r3, #1
    12a4:	4a1b      	ldr	r2, [pc, #108]	; (1314 <Reset_Handler+0xcc>)
    12a6:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
    12a8:	4a1b      	ldr	r2, [pc, #108]	; (1318 <Reset_Handler+0xd0>)
    12aa:	78d3      	ldrb	r3, [r2, #3]
    12ac:	2503      	movs	r5, #3
    12ae:	43ab      	bics	r3, r5
    12b0:	2402      	movs	r4, #2
    12b2:	4323      	orrs	r3, r4
    12b4:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
    12b6:	78d3      	ldrb	r3, [r2, #3]
    12b8:	270c      	movs	r7, #12
    12ba:	43bb      	bics	r3, r7
    12bc:	2608      	movs	r6, #8
    12be:	4333      	orrs	r3, r6
    12c0:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
    12c2:	4b16      	ldr	r3, [pc, #88]	; (131c <Reset_Handler+0xd4>)
    12c4:	7b98      	ldrb	r0, [r3, #14]
    12c6:	2230      	movs	r2, #48	; 0x30
    12c8:	4390      	bics	r0, r2
    12ca:	2220      	movs	r2, #32
    12cc:	4310      	orrs	r0, r2
    12ce:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
    12d0:	7b99      	ldrb	r1, [r3, #14]
    12d2:	43b9      	bics	r1, r7
    12d4:	4331      	orrs	r1, r6
    12d6:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
    12d8:	7b9a      	ldrb	r2, [r3, #14]
    12da:	43aa      	bics	r2, r5
    12dc:	4322      	orrs	r2, r4
    12de:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
    12e0:	4a0f      	ldr	r2, [pc, #60]	; (1320 <Reset_Handler+0xd8>)
    12e2:	6853      	ldr	r3, [r2, #4]
    12e4:	2180      	movs	r1, #128	; 0x80
    12e6:	430b      	orrs	r3, r1
    12e8:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    12ea:	4b0e      	ldr	r3, [pc, #56]	; (1324 <Reset_Handler+0xdc>)
    12ec:	4798      	blx	r3
        main();
    12ee:	4b0e      	ldr	r3, [pc, #56]	; (1328 <Reset_Handler+0xe0>)
    12f0:	4798      	blx	r3
    12f2:	e7fe      	b.n	12f2 <Reset_Handler+0xaa>
    12f4:	00002274 	.word	0x00002274
    12f8:	20000000 	.word	0x20000000
    12fc:	20000068 	.word	0x20000068
    1300:	20000004 	.word	0x20000004
    1304:	20000068 	.word	0x20000068
    1308:	20000168 	.word	0x20000168
    130c:	e000ed00 	.word	0xe000ed00
    1310:	00000000 	.word	0x00000000
    1314:	41007000 	.word	0x41007000
    1318:	41005000 	.word	0x41005000
    131c:	41004800 	.word	0x41004800
    1320:	41004000 	.word	0x41004000
    1324:	0000164d 	.word	0x0000164d
    1328:	000013ad 	.word	0x000013ad

0000132c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
    132c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    132e:	4a06      	ldr	r2, [pc, #24]	; (1348 <_sbrk+0x1c>)
    1330:	6812      	ldr	r2, [r2, #0]
    1332:	2a00      	cmp	r2, #0
    1334:	d004      	beq.n	1340 <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
    1336:	4a04      	ldr	r2, [pc, #16]	; (1348 <_sbrk+0x1c>)
    1338:	6810      	ldr	r0, [r2, #0]

	heap += incr;
    133a:	18c3      	adds	r3, r0, r3
    133c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
    133e:	4770      	bx	lr
		heap = (unsigned char *)&_end;
    1340:	4902      	ldr	r1, [pc, #8]	; (134c <_sbrk+0x20>)
    1342:	4a01      	ldr	r2, [pc, #4]	; (1348 <_sbrk+0x1c>)
    1344:	6011      	str	r1, [r2, #0]
    1346:	e7f6      	b.n	1336 <_sbrk+0xa>
    1348:	200000c0 	.word	0x200000c0
    134c:	20002168 	.word	0x20002168

00001350 <_close>:
}

extern int _close(int file)
{
	return -1;
}
    1350:	2001      	movs	r0, #1
    1352:	4240      	negs	r0, r0
    1354:	4770      	bx	lr

00001356 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
    1356:	2380      	movs	r3, #128	; 0x80
    1358:	019b      	lsls	r3, r3, #6
    135a:	604b      	str	r3, [r1, #4]

	return 0;
}
    135c:	2000      	movs	r0, #0
    135e:	4770      	bx	lr

00001360 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
    1360:	2001      	movs	r0, #1
    1362:	4770      	bx	lr

00001364 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
    1364:	2000      	movs	r0, #0
    1366:	4770      	bx	lr

00001368 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct usart_module *const module,
		uint8_t *c)
{
    1368:	b570      	push	{r4, r5, r6, lr}
    136a:	b082      	sub	sp, #8
    136c:	0005      	movs	r5, r0
    136e:	000e      	movs	r6, r1
	uint16_t temp = 0;
    1370:	2200      	movs	r2, #0
    1372:	466b      	mov	r3, sp
    1374:	80da      	strh	r2, [r3, #6]

	while(STATUS_OK != usart_read_wait(module, &temp));
    1376:	4c06      	ldr	r4, [pc, #24]	; (1390 <usart_serial_getchar+0x28>)
    1378:	466b      	mov	r3, sp
    137a:	1d99      	adds	r1, r3, #6
    137c:	0028      	movs	r0, r5
    137e:	47a0      	blx	r4
    1380:	2800      	cmp	r0, #0
    1382:	d1f9      	bne.n	1378 <usart_serial_getchar+0x10>

	*c = temp;
    1384:	466b      	mov	r3, sp
    1386:	3306      	adds	r3, #6
    1388:	881b      	ldrh	r3, [r3, #0]
    138a:	7033      	strb	r3, [r6, #0]
}
    138c:	b002      	add	sp, #8
    138e:	bd70      	pop	{r4, r5, r6, pc}
    1390:	00000909 	.word	0x00000909

00001394 <usart_serial_putchar>:
{
    1394:	b570      	push	{r4, r5, r6, lr}
    1396:	0005      	movs	r5, r0
	while(STATUS_OK !=usart_write_wait(module, c));
    1398:	b28c      	uxth	r4, r1
    139a:	4e03      	ldr	r6, [pc, #12]	; (13a8 <usart_serial_putchar+0x14>)
    139c:	0021      	movs	r1, r4
    139e:	0028      	movs	r0, r5
    13a0:	47b0      	blx	r6
    13a2:	2800      	cmp	r0, #0
    13a4:	d1fa      	bne.n	139c <usart_serial_putchar+0x8>
}
    13a6:	bd70      	pop	{r4, r5, r6, pc}
    13a8:	000008dd 	.word	0x000008dd

000013ac <main>:

struct usart_module usart_instance; 
struct usart_config usart_conf;
 
int main (void)
{
    13ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	system_init();
    13ae:	4b37      	ldr	r3, [pc, #220]	; (148c <main+0xe0>)
    13b0:	4798      	blx	r3
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
    13b2:	4a37      	ldr	r2, [pc, #220]	; (1490 <main+0xe4>)
    13b4:	2380      	movs	r3, #128	; 0x80
    13b6:	05db      	lsls	r3, r3, #23
    13b8:	6013      	str	r3, [r2, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
    13ba:	2300      	movs	r3, #0
    13bc:	6053      	str	r3, [r2, #4]
	config->parity           = USART_PARITY_NONE;
    13be:	21ff      	movs	r1, #255	; 0xff
    13c0:	8111      	strh	r1, [r2, #8]
	config->stopbits         = USART_STOPBITS_1;
    13c2:	2100      	movs	r1, #0
    13c4:	7293      	strb	r3, [r2, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
    13c6:	72d3      	strb	r3, [r2, #11]
	config->baudrate         = 9600;
    13c8:	2096      	movs	r0, #150	; 0x96
    13ca:	0180      	lsls	r0, r0, #6
    13cc:	6210      	str	r0, [r2, #32]
	config->receiver_enable  = true;
    13ce:	2401      	movs	r4, #1
    13d0:	2024      	movs	r0, #36	; 0x24
    13d2:	5414      	strb	r4, [r2, r0]
	config->transmitter_enable = true;
    13d4:	3001      	adds	r0, #1
    13d6:	5414      	strb	r4, [r2, r0]
	config->clock_polarity_inverted = false;
    13d8:	3001      	adds	r0, #1
    13da:	5413      	strb	r3, [r2, r0]
	config->use_external_clock = false;
    13dc:	3001      	adds	r0, #1
    13de:	5413      	strb	r3, [r2, r0]
	config->ext_clock_freq   = 0;
    13e0:	6293      	str	r3, [r2, #40]	; 0x28
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
    13e2:	3005      	adds	r0, #5
    13e4:	5413      	strb	r3, [r2, r0]
	config->generator_source = GCLK_GENERATOR_0;
    13e6:	3001      	adds	r0, #1
    13e8:	5413      	strb	r3, [r2, r0]
	config->pinmux_pad0      = PINMUX_DEFAULT;
	config->pinmux_pad1      = PINMUX_DEFAULT;
	config->pinmux_pad2      = PINMUX_DEFAULT;
	config->pinmux_pad3      = PINMUX_DEFAULT;
#ifdef FEATURE_USART_OVER_SAMPLE
	config->sample_adjustment     = USART_SAMPLE_ADJUSTMENT_7_8_9;
    13ea:	6153      	str	r3, [r2, #20]
	config->sample_rate           = USART_SAMPLE_RATE_16X_ARITHMETIC;
    13ec:	8213      	strh	r3, [r2, #16]
#endif
#ifdef FEATURE_USART_LIN_SLAVE
	config->lin_slave_enable      = false;
    13ee:	76d3      	strb	r3, [r2, #27]
	config->lin_header_delay = LIN_MASTER_HEADER_DELAY_0;
	config->lin_break_length = LIN_MASTER_BREAK_LENGTH_13_BIT;
#endif

#ifdef FEATURE_USART_IMMEDIATE_BUFFER_OVERFLOW_NOTIFICATION
	config->immediate_buffer_overflow_notification  = false;
    13f0:	7611      	strb	r1, [r2, #24]
#endif
#ifdef FEATURE_USART_START_FRAME_DECTION
	config->start_frame_detection_enable            = false;
    13f2:	7711      	strb	r1, [r2, #28]
#endif
#ifdef FEATURE_USART_IRDA
	config->encoding_format_enable                  = false;
    13f4:	7651      	strb	r1, [r2, #25]
	config->receive_pulse_length                    = 19;
    13f6:	2313      	movs	r3, #19
    13f8:	7693      	strb	r3, [r2, #26]
	config->iso7816_config.inhibit_nack             = ISO7816_INHIBIT_NACK_DISABLE;
	config->iso7816_config.successive_recv_nack     = ISO7816_SUCCESSIVE_RECV_NACK_DISABLE;
	config->iso7816_config.max_iterations           = 7;
#endif
#ifdef FEATURE_USART_COLLISION_DECTION
	config->collision_detection_enable              = false;
    13fa:	7751      	strb	r1, [r2, #29]

	usart_get_config_defaults(&usart_conf);
	usart_conf.baudrate    = 9600;
	usart_conf.mux_setting = EDBG_CDC_SERCOM_MUX_SETTING;
    13fc:	2380      	movs	r3, #128	; 0x80
    13fe:	035b      	lsls	r3, r3, #13
    1400:	60d3      	str	r3, [r2, #12]
	usart_conf.pinmux_pad0 = EDBG_CDC_SERCOM_PINMUX_PAD0;
    1402:	4b24      	ldr	r3, [pc, #144]	; (1494 <main+0xe8>)
    1404:	6313      	str	r3, [r2, #48]	; 0x30
	usart_conf.pinmux_pad1 = EDBG_CDC_SERCOM_PINMUX_PAD1;
    1406:	4b24      	ldr	r3, [pc, #144]	; (1498 <main+0xec>)
    1408:	6353      	str	r3, [r2, #52]	; 0x34
	usart_conf.pinmux_pad2 = EDBG_CDC_SERCOM_PINMUX_PAD2;
    140a:	2301      	movs	r3, #1
    140c:	425b      	negs	r3, r3
    140e:	6393      	str	r3, [r2, #56]	; 0x38
	usart_conf.pinmux_pad3 = EDBG_CDC_SERCOM_PINMUX_PAD3;
    1410:	63d3      	str	r3, [r2, #60]	; 0x3c
static inline void stdio_serial_init(
		struct usart_module *const module,
		usart_inst_t const hw,
		const struct usart_config *const config)
{
	stdio_base = (void *)module;
    1412:	4d22      	ldr	r5, [pc, #136]	; (149c <main+0xf0>)
    1414:	4b22      	ldr	r3, [pc, #136]	; (14a0 <main+0xf4>)
    1416:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
    1418:	4922      	ldr	r1, [pc, #136]	; (14a4 <main+0xf8>)
    141a:	4b23      	ldr	r3, [pc, #140]	; (14a8 <main+0xfc>)
    141c:	6019      	str	r1, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
    141e:	4923      	ldr	r1, [pc, #140]	; (14ac <main+0x100>)
    1420:	4b23      	ldr	r3, [pc, #140]	; (14b0 <main+0x104>)
    1422:	6019      	str	r1, [r3, #0]
	if (usart_init(module, hw, config) == STATUS_OK) {
    1424:	4923      	ldr	r1, [pc, #140]	; (14b4 <main+0x108>)
    1426:	0028      	movs	r0, r5
    1428:	4b23      	ldr	r3, [pc, #140]	; (14b8 <main+0x10c>)
    142a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
    142c:	4f23      	ldr	r7, [pc, #140]	; (14bc <main+0x110>)
    142e:	683b      	ldr	r3, [r7, #0]
    1430:	6898      	ldr	r0, [r3, #8]
    1432:	2100      	movs	r1, #0
    1434:	4e22      	ldr	r6, [pc, #136]	; (14c0 <main+0x114>)
    1436:	47b0      	blx	r6
	setbuf(stdin, NULL);
    1438:	683b      	ldr	r3, [r7, #0]
    143a:	6858      	ldr	r0, [r3, #4]
    143c:	2100      	movs	r1, #0
    143e:	47b0      	blx	r6
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    1440:	682e      	ldr	r6, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
    1442:	0030      	movs	r0, r6
    1444:	4b1f      	ldr	r3, [pc, #124]	; (14c4 <main+0x118>)
    1446:	4798      	blx	r3
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
    1448:	231f      	movs	r3, #31
    144a:	4018      	ands	r0, r3
    144c:	4084      	lsls	r4, r0
    144e:	4b1e      	ldr	r3, [pc, #120]	; (14c8 <main+0x11c>)
    1450:	601c      	str	r4, [r3, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
    1452:	682b      	ldr	r3, [r5, #0]
	return (usart_hw->SYNCBUSY.reg);
    1454:	69da      	ldr	r2, [r3, #28]
	while (usart_is_syncing(module)) {
    1456:	2a00      	cmp	r2, #0
    1458:	d1fc      	bne.n	1454 <main+0xa8>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    145a:	6833      	ldr	r3, [r6, #0]
    145c:	3202      	adds	r2, #2
    145e:	4313      	orrs	r3, r2
    1460:	6033      	str	r3, [r6, #0]
	stdio_serial_init(&usart_instance, EDBG_CDC_MODULE, &usart_conf);
	
	usart_enable(&usart_instance);
	
	/* Insert application code here, after the board has been initialized. */
	printf("Oi Turma !!\r\n");
    1462:	481a      	ldr	r0, [pc, #104]	; (14cc <main+0x120>)
    1464:	4b1a      	ldr	r3, [pc, #104]	; (14d0 <main+0x124>)
    1466:	4798      	blx	r3
    1468:	4d1a      	ldr	r5, [pc, #104]	; (14d4 <main+0x128>)
	while (1) {
		/* Is button pressed? */
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
			/* Yes, so turn LED on. */
			port_pin_set_output_level(LED_0_PIN, LED_0_ACTIVE);
			printf("LED ON\r\n");
    146a:	4c1b      	ldr	r4, [pc, #108]	; (14d8 <main+0x12c>)
    146c:	e005      	b.n	147a <main+0xce>
	} else {
		port_base->OUTCLR.reg = pin_mask;
    146e:	2380      	movs	r3, #128	; 0x80
    1470:	05db      	lsls	r3, r3, #23
    1472:	616b      	str	r3, [r5, #20]
    1474:	0020      	movs	r0, r4
    1476:	4b16      	ldr	r3, [pc, #88]	; (14d0 <main+0x124>)
    1478:	4798      	blx	r3
	return (port_base->IN.reg & pin_mask);
    147a:	4b18      	ldr	r3, [pc, #96]	; (14dc <main+0x130>)
    147c:	6a1b      	ldr	r3, [r3, #32]
		if (port_pin_get_input_level(BUTTON_0_PIN) == BUTTON_0_ACTIVE) {
    147e:	041b      	lsls	r3, r3, #16
    1480:	d5f5      	bpl.n	146e <main+0xc2>
		port_base->OUTSET.reg = pin_mask;
    1482:	2380      	movs	r3, #128	; 0x80
    1484:	05db      	lsls	r3, r3, #23
    1486:	61ab      	str	r3, [r5, #24]
    1488:	e7f7      	b.n	147a <main+0xce>
    148a:	46c0      	nop			; (mov r8, r8)
    148c:	00001219 	.word	0x00001219
    1490:	20000124 	.word	0x20000124
    1494:	00160002 	.word	0x00160002
    1498:	00170002 	.word	0x00170002
    149c:	200000f0 	.word	0x200000f0
    14a0:	200000d4 	.word	0x200000d4
    14a4:	00001395 	.word	0x00001395
    14a8:	200000d0 	.word	0x200000d0
    14ac:	00001369 	.word	0x00001369
    14b0:	200000cc 	.word	0x200000cc
    14b4:	42001400 	.word	0x42001400
    14b8:	0000059d 	.word	0x0000059d
    14bc:	20000004 	.word	0x20000004
    14c0:	00001779 	.word	0x00001779
    14c4:	00000b4d 	.word	0x00000b4d
    14c8:	e000e100 	.word	0xe000e100
    14cc:	000021d8 	.word	0x000021d8
    14d0:	00001765 	.word	0x00001765
    14d4:	41004480 	.word	0x41004480
    14d8:	000021e8 	.word	0x000021e8
    14dc:	41004400 	.word	0x41004400

000014e0 <__udivsi3>:
    14e0:	2200      	movs	r2, #0
    14e2:	0843      	lsrs	r3, r0, #1
    14e4:	428b      	cmp	r3, r1
    14e6:	d374      	bcc.n	15d2 <__udivsi3+0xf2>
    14e8:	0903      	lsrs	r3, r0, #4
    14ea:	428b      	cmp	r3, r1
    14ec:	d35f      	bcc.n	15ae <__udivsi3+0xce>
    14ee:	0a03      	lsrs	r3, r0, #8
    14f0:	428b      	cmp	r3, r1
    14f2:	d344      	bcc.n	157e <__udivsi3+0x9e>
    14f4:	0b03      	lsrs	r3, r0, #12
    14f6:	428b      	cmp	r3, r1
    14f8:	d328      	bcc.n	154c <__udivsi3+0x6c>
    14fa:	0c03      	lsrs	r3, r0, #16
    14fc:	428b      	cmp	r3, r1
    14fe:	d30d      	bcc.n	151c <__udivsi3+0x3c>
    1500:	22ff      	movs	r2, #255	; 0xff
    1502:	0209      	lsls	r1, r1, #8
    1504:	ba12      	rev	r2, r2
    1506:	0c03      	lsrs	r3, r0, #16
    1508:	428b      	cmp	r3, r1
    150a:	d302      	bcc.n	1512 <__udivsi3+0x32>
    150c:	1212      	asrs	r2, r2, #8
    150e:	0209      	lsls	r1, r1, #8
    1510:	d065      	beq.n	15de <__udivsi3+0xfe>
    1512:	0b03      	lsrs	r3, r0, #12
    1514:	428b      	cmp	r3, r1
    1516:	d319      	bcc.n	154c <__udivsi3+0x6c>
    1518:	e000      	b.n	151c <__udivsi3+0x3c>
    151a:	0a09      	lsrs	r1, r1, #8
    151c:	0bc3      	lsrs	r3, r0, #15
    151e:	428b      	cmp	r3, r1
    1520:	d301      	bcc.n	1526 <__udivsi3+0x46>
    1522:	03cb      	lsls	r3, r1, #15
    1524:	1ac0      	subs	r0, r0, r3
    1526:	4152      	adcs	r2, r2
    1528:	0b83      	lsrs	r3, r0, #14
    152a:	428b      	cmp	r3, r1
    152c:	d301      	bcc.n	1532 <__udivsi3+0x52>
    152e:	038b      	lsls	r3, r1, #14
    1530:	1ac0      	subs	r0, r0, r3
    1532:	4152      	adcs	r2, r2
    1534:	0b43      	lsrs	r3, r0, #13
    1536:	428b      	cmp	r3, r1
    1538:	d301      	bcc.n	153e <__udivsi3+0x5e>
    153a:	034b      	lsls	r3, r1, #13
    153c:	1ac0      	subs	r0, r0, r3
    153e:	4152      	adcs	r2, r2
    1540:	0b03      	lsrs	r3, r0, #12
    1542:	428b      	cmp	r3, r1
    1544:	d301      	bcc.n	154a <__udivsi3+0x6a>
    1546:	030b      	lsls	r3, r1, #12
    1548:	1ac0      	subs	r0, r0, r3
    154a:	4152      	adcs	r2, r2
    154c:	0ac3      	lsrs	r3, r0, #11
    154e:	428b      	cmp	r3, r1
    1550:	d301      	bcc.n	1556 <__udivsi3+0x76>
    1552:	02cb      	lsls	r3, r1, #11
    1554:	1ac0      	subs	r0, r0, r3
    1556:	4152      	adcs	r2, r2
    1558:	0a83      	lsrs	r3, r0, #10
    155a:	428b      	cmp	r3, r1
    155c:	d301      	bcc.n	1562 <__udivsi3+0x82>
    155e:	028b      	lsls	r3, r1, #10
    1560:	1ac0      	subs	r0, r0, r3
    1562:	4152      	adcs	r2, r2
    1564:	0a43      	lsrs	r3, r0, #9
    1566:	428b      	cmp	r3, r1
    1568:	d301      	bcc.n	156e <__udivsi3+0x8e>
    156a:	024b      	lsls	r3, r1, #9
    156c:	1ac0      	subs	r0, r0, r3
    156e:	4152      	adcs	r2, r2
    1570:	0a03      	lsrs	r3, r0, #8
    1572:	428b      	cmp	r3, r1
    1574:	d301      	bcc.n	157a <__udivsi3+0x9a>
    1576:	020b      	lsls	r3, r1, #8
    1578:	1ac0      	subs	r0, r0, r3
    157a:	4152      	adcs	r2, r2
    157c:	d2cd      	bcs.n	151a <__udivsi3+0x3a>
    157e:	09c3      	lsrs	r3, r0, #7
    1580:	428b      	cmp	r3, r1
    1582:	d301      	bcc.n	1588 <__udivsi3+0xa8>
    1584:	01cb      	lsls	r3, r1, #7
    1586:	1ac0      	subs	r0, r0, r3
    1588:	4152      	adcs	r2, r2
    158a:	0983      	lsrs	r3, r0, #6
    158c:	428b      	cmp	r3, r1
    158e:	d301      	bcc.n	1594 <__udivsi3+0xb4>
    1590:	018b      	lsls	r3, r1, #6
    1592:	1ac0      	subs	r0, r0, r3
    1594:	4152      	adcs	r2, r2
    1596:	0943      	lsrs	r3, r0, #5
    1598:	428b      	cmp	r3, r1
    159a:	d301      	bcc.n	15a0 <__udivsi3+0xc0>
    159c:	014b      	lsls	r3, r1, #5
    159e:	1ac0      	subs	r0, r0, r3
    15a0:	4152      	adcs	r2, r2
    15a2:	0903      	lsrs	r3, r0, #4
    15a4:	428b      	cmp	r3, r1
    15a6:	d301      	bcc.n	15ac <__udivsi3+0xcc>
    15a8:	010b      	lsls	r3, r1, #4
    15aa:	1ac0      	subs	r0, r0, r3
    15ac:	4152      	adcs	r2, r2
    15ae:	08c3      	lsrs	r3, r0, #3
    15b0:	428b      	cmp	r3, r1
    15b2:	d301      	bcc.n	15b8 <__udivsi3+0xd8>
    15b4:	00cb      	lsls	r3, r1, #3
    15b6:	1ac0      	subs	r0, r0, r3
    15b8:	4152      	adcs	r2, r2
    15ba:	0883      	lsrs	r3, r0, #2
    15bc:	428b      	cmp	r3, r1
    15be:	d301      	bcc.n	15c4 <__udivsi3+0xe4>
    15c0:	008b      	lsls	r3, r1, #2
    15c2:	1ac0      	subs	r0, r0, r3
    15c4:	4152      	adcs	r2, r2
    15c6:	0843      	lsrs	r3, r0, #1
    15c8:	428b      	cmp	r3, r1
    15ca:	d301      	bcc.n	15d0 <__udivsi3+0xf0>
    15cc:	004b      	lsls	r3, r1, #1
    15ce:	1ac0      	subs	r0, r0, r3
    15d0:	4152      	adcs	r2, r2
    15d2:	1a41      	subs	r1, r0, r1
    15d4:	d200      	bcs.n	15d8 <__udivsi3+0xf8>
    15d6:	4601      	mov	r1, r0
    15d8:	4152      	adcs	r2, r2
    15da:	4610      	mov	r0, r2
    15dc:	4770      	bx	lr
    15de:	e7ff      	b.n	15e0 <__udivsi3+0x100>
    15e0:	b501      	push	{r0, lr}
    15e2:	2000      	movs	r0, #0
    15e4:	f000 f806 	bl	15f4 <__aeabi_idiv0>
    15e8:	bd02      	pop	{r1, pc}
    15ea:	46c0      	nop			; (mov r8, r8)

000015ec <__aeabi_uidivmod>:
    15ec:	2900      	cmp	r1, #0
    15ee:	d0f7      	beq.n	15e0 <__udivsi3+0x100>
    15f0:	e776      	b.n	14e0 <__udivsi3>
    15f2:	4770      	bx	lr

000015f4 <__aeabi_idiv0>:
    15f4:	4770      	bx	lr
    15f6:	46c0      	nop			; (mov r8, r8)

000015f8 <__aeabi_lmul>:
    15f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    15fa:	46ce      	mov	lr, r9
    15fc:	4647      	mov	r7, r8
    15fe:	0415      	lsls	r5, r2, #16
    1600:	0c2d      	lsrs	r5, r5, #16
    1602:	002e      	movs	r6, r5
    1604:	b580      	push	{r7, lr}
    1606:	0407      	lsls	r7, r0, #16
    1608:	0c14      	lsrs	r4, r2, #16
    160a:	0c3f      	lsrs	r7, r7, #16
    160c:	4699      	mov	r9, r3
    160e:	0c03      	lsrs	r3, r0, #16
    1610:	437e      	muls	r6, r7
    1612:	435d      	muls	r5, r3
    1614:	4367      	muls	r7, r4
    1616:	4363      	muls	r3, r4
    1618:	197f      	adds	r7, r7, r5
    161a:	0c34      	lsrs	r4, r6, #16
    161c:	19e4      	adds	r4, r4, r7
    161e:	469c      	mov	ip, r3
    1620:	42a5      	cmp	r5, r4
    1622:	d903      	bls.n	162c <__aeabi_lmul+0x34>
    1624:	2380      	movs	r3, #128	; 0x80
    1626:	025b      	lsls	r3, r3, #9
    1628:	4698      	mov	r8, r3
    162a:	44c4      	add	ip, r8
    162c:	464b      	mov	r3, r9
    162e:	4351      	muls	r1, r2
    1630:	4343      	muls	r3, r0
    1632:	0436      	lsls	r6, r6, #16
    1634:	0c36      	lsrs	r6, r6, #16
    1636:	0c25      	lsrs	r5, r4, #16
    1638:	0424      	lsls	r4, r4, #16
    163a:	4465      	add	r5, ip
    163c:	19a4      	adds	r4, r4, r6
    163e:	1859      	adds	r1, r3, r1
    1640:	1949      	adds	r1, r1, r5
    1642:	0020      	movs	r0, r4
    1644:	bc0c      	pop	{r2, r3}
    1646:	4690      	mov	r8, r2
    1648:	4699      	mov	r9, r3
    164a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000164c <__libc_init_array>:
    164c:	b570      	push	{r4, r5, r6, lr}
    164e:	2600      	movs	r6, #0
    1650:	4d0c      	ldr	r5, [pc, #48]	; (1684 <__libc_init_array+0x38>)
    1652:	4c0d      	ldr	r4, [pc, #52]	; (1688 <__libc_init_array+0x3c>)
    1654:	1b64      	subs	r4, r4, r5
    1656:	10a4      	asrs	r4, r4, #2
    1658:	42a6      	cmp	r6, r4
    165a:	d109      	bne.n	1670 <__libc_init_array+0x24>
    165c:	2600      	movs	r6, #0
    165e:	f000 fdf9 	bl	2254 <_init>
    1662:	4d0a      	ldr	r5, [pc, #40]	; (168c <__libc_init_array+0x40>)
    1664:	4c0a      	ldr	r4, [pc, #40]	; (1690 <__libc_init_array+0x44>)
    1666:	1b64      	subs	r4, r4, r5
    1668:	10a4      	asrs	r4, r4, #2
    166a:	42a6      	cmp	r6, r4
    166c:	d105      	bne.n	167a <__libc_init_array+0x2e>
    166e:	bd70      	pop	{r4, r5, r6, pc}
    1670:	00b3      	lsls	r3, r6, #2
    1672:	58eb      	ldr	r3, [r5, r3]
    1674:	4798      	blx	r3
    1676:	3601      	adds	r6, #1
    1678:	e7ee      	b.n	1658 <__libc_init_array+0xc>
    167a:	00b3      	lsls	r3, r6, #2
    167c:	58eb      	ldr	r3, [r5, r3]
    167e:	4798      	blx	r3
    1680:	3601      	adds	r6, #1
    1682:	e7f2      	b.n	166a <__libc_init_array+0x1e>
    1684:	00002260 	.word	0x00002260
    1688:	00002260 	.word	0x00002260
    168c:	00002260 	.word	0x00002260
    1690:	00002264 	.word	0x00002264

00001694 <memset>:
    1694:	0003      	movs	r3, r0
    1696:	1882      	adds	r2, r0, r2
    1698:	4293      	cmp	r3, r2
    169a:	d100      	bne.n	169e <memset+0xa>
    169c:	4770      	bx	lr
    169e:	7019      	strb	r1, [r3, #0]
    16a0:	3301      	adds	r3, #1
    16a2:	e7f9      	b.n	1698 <memset+0x4>

000016a4 <_puts_r>:
    16a4:	b570      	push	{r4, r5, r6, lr}
    16a6:	0005      	movs	r5, r0
    16a8:	000e      	movs	r6, r1
    16aa:	2800      	cmp	r0, #0
    16ac:	d004      	beq.n	16b8 <_puts_r+0x14>
    16ae:	6983      	ldr	r3, [r0, #24]
    16b0:	2b00      	cmp	r3, #0
    16b2:	d101      	bne.n	16b8 <_puts_r+0x14>
    16b4:	f000 fada 	bl	1c6c <__sinit>
    16b8:	69ab      	ldr	r3, [r5, #24]
    16ba:	68ac      	ldr	r4, [r5, #8]
    16bc:	2b00      	cmp	r3, #0
    16be:	d102      	bne.n	16c6 <_puts_r+0x22>
    16c0:	0028      	movs	r0, r5
    16c2:	f000 fad3 	bl	1c6c <__sinit>
    16c6:	4b24      	ldr	r3, [pc, #144]	; (1758 <_puts_r+0xb4>)
    16c8:	429c      	cmp	r4, r3
    16ca:	d10f      	bne.n	16ec <_puts_r+0x48>
    16cc:	686c      	ldr	r4, [r5, #4]
    16ce:	89a3      	ldrh	r3, [r4, #12]
    16d0:	071b      	lsls	r3, r3, #28
    16d2:	d502      	bpl.n	16da <_puts_r+0x36>
    16d4:	6923      	ldr	r3, [r4, #16]
    16d6:	2b00      	cmp	r3, #0
    16d8:	d120      	bne.n	171c <_puts_r+0x78>
    16da:	0021      	movs	r1, r4
    16dc:	0028      	movs	r0, r5
    16de:	f000 f957 	bl	1990 <__swsetup_r>
    16e2:	2800      	cmp	r0, #0
    16e4:	d01a      	beq.n	171c <_puts_r+0x78>
    16e6:	2001      	movs	r0, #1
    16e8:	4240      	negs	r0, r0
    16ea:	bd70      	pop	{r4, r5, r6, pc}
    16ec:	4b1b      	ldr	r3, [pc, #108]	; (175c <_puts_r+0xb8>)
    16ee:	429c      	cmp	r4, r3
    16f0:	d101      	bne.n	16f6 <_puts_r+0x52>
    16f2:	68ac      	ldr	r4, [r5, #8]
    16f4:	e7eb      	b.n	16ce <_puts_r+0x2a>
    16f6:	4b1a      	ldr	r3, [pc, #104]	; (1760 <_puts_r+0xbc>)
    16f8:	429c      	cmp	r4, r3
    16fa:	d1e8      	bne.n	16ce <_puts_r+0x2a>
    16fc:	68ec      	ldr	r4, [r5, #12]
    16fe:	e7e6      	b.n	16ce <_puts_r+0x2a>
    1700:	3b01      	subs	r3, #1
    1702:	3601      	adds	r6, #1
    1704:	60a3      	str	r3, [r4, #8]
    1706:	2b00      	cmp	r3, #0
    1708:	da04      	bge.n	1714 <_puts_r+0x70>
    170a:	69a2      	ldr	r2, [r4, #24]
    170c:	4293      	cmp	r3, r2
    170e:	db16      	blt.n	173e <_puts_r+0x9a>
    1710:	290a      	cmp	r1, #10
    1712:	d014      	beq.n	173e <_puts_r+0x9a>
    1714:	6823      	ldr	r3, [r4, #0]
    1716:	1c5a      	adds	r2, r3, #1
    1718:	6022      	str	r2, [r4, #0]
    171a:	7019      	strb	r1, [r3, #0]
    171c:	7831      	ldrb	r1, [r6, #0]
    171e:	68a3      	ldr	r3, [r4, #8]
    1720:	2900      	cmp	r1, #0
    1722:	d1ed      	bne.n	1700 <_puts_r+0x5c>
    1724:	3b01      	subs	r3, #1
    1726:	60a3      	str	r3, [r4, #8]
    1728:	2b00      	cmp	r3, #0
    172a:	da0f      	bge.n	174c <_puts_r+0xa8>
    172c:	0022      	movs	r2, r4
    172e:	310a      	adds	r1, #10
    1730:	0028      	movs	r0, r5
    1732:	f000 f8d7 	bl	18e4 <__swbuf_r>
    1736:	1c43      	adds	r3, r0, #1
    1738:	d0d5      	beq.n	16e6 <_puts_r+0x42>
    173a:	200a      	movs	r0, #10
    173c:	e7d5      	b.n	16ea <_puts_r+0x46>
    173e:	0022      	movs	r2, r4
    1740:	0028      	movs	r0, r5
    1742:	f000 f8cf 	bl	18e4 <__swbuf_r>
    1746:	1c43      	adds	r3, r0, #1
    1748:	d1e8      	bne.n	171c <_puts_r+0x78>
    174a:	e7cc      	b.n	16e6 <_puts_r+0x42>
    174c:	200a      	movs	r0, #10
    174e:	6823      	ldr	r3, [r4, #0]
    1750:	1c5a      	adds	r2, r3, #1
    1752:	6022      	str	r2, [r4, #0]
    1754:	7018      	strb	r0, [r3, #0]
    1756:	e7c8      	b.n	16ea <_puts_r+0x46>
    1758:	00002214 	.word	0x00002214
    175c:	00002234 	.word	0x00002234
    1760:	000021f4 	.word	0x000021f4

00001764 <puts>:
    1764:	b510      	push	{r4, lr}
    1766:	4b03      	ldr	r3, [pc, #12]	; (1774 <puts+0x10>)
    1768:	0001      	movs	r1, r0
    176a:	6818      	ldr	r0, [r3, #0]
    176c:	f7ff ff9a 	bl	16a4 <_puts_r>
    1770:	bd10      	pop	{r4, pc}
    1772:	46c0      	nop			; (mov r8, r8)
    1774:	20000004 	.word	0x20000004

00001778 <setbuf>:
    1778:	424a      	negs	r2, r1
    177a:	414a      	adcs	r2, r1
    177c:	2380      	movs	r3, #128	; 0x80
    177e:	b510      	push	{r4, lr}
    1780:	0052      	lsls	r2, r2, #1
    1782:	00db      	lsls	r3, r3, #3
    1784:	f000 f802 	bl	178c <setvbuf>
    1788:	bd10      	pop	{r4, pc}
	...

0000178c <setvbuf>:
    178c:	b5f0      	push	{r4, r5, r6, r7, lr}
    178e:	001d      	movs	r5, r3
    1790:	4b4f      	ldr	r3, [pc, #316]	; (18d0 <setvbuf+0x144>)
    1792:	b085      	sub	sp, #20
    1794:	681e      	ldr	r6, [r3, #0]
    1796:	0004      	movs	r4, r0
    1798:	000f      	movs	r7, r1
    179a:	9200      	str	r2, [sp, #0]
    179c:	2e00      	cmp	r6, #0
    179e:	d005      	beq.n	17ac <setvbuf+0x20>
    17a0:	69b3      	ldr	r3, [r6, #24]
    17a2:	2b00      	cmp	r3, #0
    17a4:	d102      	bne.n	17ac <setvbuf+0x20>
    17a6:	0030      	movs	r0, r6
    17a8:	f000 fa60 	bl	1c6c <__sinit>
    17ac:	4b49      	ldr	r3, [pc, #292]	; (18d4 <setvbuf+0x148>)
    17ae:	429c      	cmp	r4, r3
    17b0:	d150      	bne.n	1854 <setvbuf+0xc8>
    17b2:	6874      	ldr	r4, [r6, #4]
    17b4:	9b00      	ldr	r3, [sp, #0]
    17b6:	2b02      	cmp	r3, #2
    17b8:	d005      	beq.n	17c6 <setvbuf+0x3a>
    17ba:	2b01      	cmp	r3, #1
    17bc:	d900      	bls.n	17c0 <setvbuf+0x34>
    17be:	e084      	b.n	18ca <setvbuf+0x13e>
    17c0:	2d00      	cmp	r5, #0
    17c2:	da00      	bge.n	17c6 <setvbuf+0x3a>
    17c4:	e081      	b.n	18ca <setvbuf+0x13e>
    17c6:	0021      	movs	r1, r4
    17c8:	0030      	movs	r0, r6
    17ca:	f000 f9e1 	bl	1b90 <_fflush_r>
    17ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
    17d0:	2900      	cmp	r1, #0
    17d2:	d008      	beq.n	17e6 <setvbuf+0x5a>
    17d4:	0023      	movs	r3, r4
    17d6:	3344      	adds	r3, #68	; 0x44
    17d8:	4299      	cmp	r1, r3
    17da:	d002      	beq.n	17e2 <setvbuf+0x56>
    17dc:	0030      	movs	r0, r6
    17de:	f000 fb51 	bl	1e84 <_free_r>
    17e2:	2300      	movs	r3, #0
    17e4:	6363      	str	r3, [r4, #52]	; 0x34
    17e6:	2300      	movs	r3, #0
    17e8:	61a3      	str	r3, [r4, #24]
    17ea:	6063      	str	r3, [r4, #4]
    17ec:	89a3      	ldrh	r3, [r4, #12]
    17ee:	061b      	lsls	r3, r3, #24
    17f0:	d503      	bpl.n	17fa <setvbuf+0x6e>
    17f2:	6921      	ldr	r1, [r4, #16]
    17f4:	0030      	movs	r0, r6
    17f6:	f000 fb45 	bl	1e84 <_free_r>
    17fa:	89a3      	ldrh	r3, [r4, #12]
    17fc:	4a36      	ldr	r2, [pc, #216]	; (18d8 <setvbuf+0x14c>)
    17fe:	4013      	ands	r3, r2
    1800:	81a3      	strh	r3, [r4, #12]
    1802:	9b00      	ldr	r3, [sp, #0]
    1804:	2b02      	cmp	r3, #2
    1806:	d05a      	beq.n	18be <setvbuf+0x132>
    1808:	ab03      	add	r3, sp, #12
    180a:	aa02      	add	r2, sp, #8
    180c:	0021      	movs	r1, r4
    180e:	0030      	movs	r0, r6
    1810:	f000 fac2 	bl	1d98 <__swhatbuf_r>
    1814:	89a3      	ldrh	r3, [r4, #12]
    1816:	4318      	orrs	r0, r3
    1818:	81a0      	strh	r0, [r4, #12]
    181a:	2d00      	cmp	r5, #0
    181c:	d124      	bne.n	1868 <setvbuf+0xdc>
    181e:	9d02      	ldr	r5, [sp, #8]
    1820:	0028      	movs	r0, r5
    1822:	f000 fb25 	bl	1e70 <malloc>
    1826:	9501      	str	r5, [sp, #4]
    1828:	1e07      	subs	r7, r0, #0
    182a:	d142      	bne.n	18b2 <setvbuf+0x126>
    182c:	9b02      	ldr	r3, [sp, #8]
    182e:	9301      	str	r3, [sp, #4]
    1830:	42ab      	cmp	r3, r5
    1832:	d139      	bne.n	18a8 <setvbuf+0x11c>
    1834:	2001      	movs	r0, #1
    1836:	4240      	negs	r0, r0
    1838:	2302      	movs	r3, #2
    183a:	89a2      	ldrh	r2, [r4, #12]
    183c:	4313      	orrs	r3, r2
    183e:	81a3      	strh	r3, [r4, #12]
    1840:	2300      	movs	r3, #0
    1842:	60a3      	str	r3, [r4, #8]
    1844:	0023      	movs	r3, r4
    1846:	3347      	adds	r3, #71	; 0x47
    1848:	6023      	str	r3, [r4, #0]
    184a:	6123      	str	r3, [r4, #16]
    184c:	2301      	movs	r3, #1
    184e:	6163      	str	r3, [r4, #20]
    1850:	b005      	add	sp, #20
    1852:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1854:	4b21      	ldr	r3, [pc, #132]	; (18dc <setvbuf+0x150>)
    1856:	429c      	cmp	r4, r3
    1858:	d101      	bne.n	185e <setvbuf+0xd2>
    185a:	68b4      	ldr	r4, [r6, #8]
    185c:	e7aa      	b.n	17b4 <setvbuf+0x28>
    185e:	4b20      	ldr	r3, [pc, #128]	; (18e0 <setvbuf+0x154>)
    1860:	429c      	cmp	r4, r3
    1862:	d1a7      	bne.n	17b4 <setvbuf+0x28>
    1864:	68f4      	ldr	r4, [r6, #12]
    1866:	e7a5      	b.n	17b4 <setvbuf+0x28>
    1868:	2f00      	cmp	r7, #0
    186a:	d0d9      	beq.n	1820 <setvbuf+0x94>
    186c:	69b3      	ldr	r3, [r6, #24]
    186e:	2b00      	cmp	r3, #0
    1870:	d102      	bne.n	1878 <setvbuf+0xec>
    1872:	0030      	movs	r0, r6
    1874:	f000 f9fa 	bl	1c6c <__sinit>
    1878:	9b00      	ldr	r3, [sp, #0]
    187a:	2b01      	cmp	r3, #1
    187c:	d103      	bne.n	1886 <setvbuf+0xfa>
    187e:	89a3      	ldrh	r3, [r4, #12]
    1880:	9a00      	ldr	r2, [sp, #0]
    1882:	431a      	orrs	r2, r3
    1884:	81a2      	strh	r2, [r4, #12]
    1886:	2008      	movs	r0, #8
    1888:	89a3      	ldrh	r3, [r4, #12]
    188a:	6027      	str	r7, [r4, #0]
    188c:	6127      	str	r7, [r4, #16]
    188e:	6165      	str	r5, [r4, #20]
    1890:	4018      	ands	r0, r3
    1892:	d018      	beq.n	18c6 <setvbuf+0x13a>
    1894:	2001      	movs	r0, #1
    1896:	4018      	ands	r0, r3
    1898:	2300      	movs	r3, #0
    189a:	4298      	cmp	r0, r3
    189c:	d011      	beq.n	18c2 <setvbuf+0x136>
    189e:	426d      	negs	r5, r5
    18a0:	60a3      	str	r3, [r4, #8]
    18a2:	61a5      	str	r5, [r4, #24]
    18a4:	0018      	movs	r0, r3
    18a6:	e7d3      	b.n	1850 <setvbuf+0xc4>
    18a8:	9801      	ldr	r0, [sp, #4]
    18aa:	f000 fae1 	bl	1e70 <malloc>
    18ae:	1e07      	subs	r7, r0, #0
    18b0:	d0c0      	beq.n	1834 <setvbuf+0xa8>
    18b2:	2380      	movs	r3, #128	; 0x80
    18b4:	89a2      	ldrh	r2, [r4, #12]
    18b6:	9d01      	ldr	r5, [sp, #4]
    18b8:	4313      	orrs	r3, r2
    18ba:	81a3      	strh	r3, [r4, #12]
    18bc:	e7d6      	b.n	186c <setvbuf+0xe0>
    18be:	2000      	movs	r0, #0
    18c0:	e7ba      	b.n	1838 <setvbuf+0xac>
    18c2:	60a5      	str	r5, [r4, #8]
    18c4:	e7c4      	b.n	1850 <setvbuf+0xc4>
    18c6:	60a0      	str	r0, [r4, #8]
    18c8:	e7c2      	b.n	1850 <setvbuf+0xc4>
    18ca:	2001      	movs	r0, #1
    18cc:	4240      	negs	r0, r0
    18ce:	e7bf      	b.n	1850 <setvbuf+0xc4>
    18d0:	20000004 	.word	0x20000004
    18d4:	00002214 	.word	0x00002214
    18d8:	fffff35c 	.word	0xfffff35c
    18dc:	00002234 	.word	0x00002234
    18e0:	000021f4 	.word	0x000021f4

000018e4 <__swbuf_r>:
    18e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    18e6:	0005      	movs	r5, r0
    18e8:	000e      	movs	r6, r1
    18ea:	0014      	movs	r4, r2
    18ec:	2800      	cmp	r0, #0
    18ee:	d004      	beq.n	18fa <__swbuf_r+0x16>
    18f0:	6983      	ldr	r3, [r0, #24]
    18f2:	2b00      	cmp	r3, #0
    18f4:	d101      	bne.n	18fa <__swbuf_r+0x16>
    18f6:	f000 f9b9 	bl	1c6c <__sinit>
    18fa:	4b22      	ldr	r3, [pc, #136]	; (1984 <__swbuf_r+0xa0>)
    18fc:	429c      	cmp	r4, r3
    18fe:	d12d      	bne.n	195c <__swbuf_r+0x78>
    1900:	686c      	ldr	r4, [r5, #4]
    1902:	69a3      	ldr	r3, [r4, #24]
    1904:	60a3      	str	r3, [r4, #8]
    1906:	89a3      	ldrh	r3, [r4, #12]
    1908:	071b      	lsls	r3, r3, #28
    190a:	d531      	bpl.n	1970 <__swbuf_r+0x8c>
    190c:	6923      	ldr	r3, [r4, #16]
    190e:	2b00      	cmp	r3, #0
    1910:	d02e      	beq.n	1970 <__swbuf_r+0x8c>
    1912:	6823      	ldr	r3, [r4, #0]
    1914:	6922      	ldr	r2, [r4, #16]
    1916:	b2f7      	uxtb	r7, r6
    1918:	1a98      	subs	r0, r3, r2
    191a:	6963      	ldr	r3, [r4, #20]
    191c:	b2f6      	uxtb	r6, r6
    191e:	4298      	cmp	r0, r3
    1920:	db05      	blt.n	192e <__swbuf_r+0x4a>
    1922:	0021      	movs	r1, r4
    1924:	0028      	movs	r0, r5
    1926:	f000 f933 	bl	1b90 <_fflush_r>
    192a:	2800      	cmp	r0, #0
    192c:	d126      	bne.n	197c <__swbuf_r+0x98>
    192e:	68a3      	ldr	r3, [r4, #8]
    1930:	3001      	adds	r0, #1
    1932:	3b01      	subs	r3, #1
    1934:	60a3      	str	r3, [r4, #8]
    1936:	6823      	ldr	r3, [r4, #0]
    1938:	1c5a      	adds	r2, r3, #1
    193a:	6022      	str	r2, [r4, #0]
    193c:	701f      	strb	r7, [r3, #0]
    193e:	6963      	ldr	r3, [r4, #20]
    1940:	4298      	cmp	r0, r3
    1942:	d004      	beq.n	194e <__swbuf_r+0x6a>
    1944:	89a3      	ldrh	r3, [r4, #12]
    1946:	07db      	lsls	r3, r3, #31
    1948:	d51a      	bpl.n	1980 <__swbuf_r+0x9c>
    194a:	2e0a      	cmp	r6, #10
    194c:	d118      	bne.n	1980 <__swbuf_r+0x9c>
    194e:	0021      	movs	r1, r4
    1950:	0028      	movs	r0, r5
    1952:	f000 f91d 	bl	1b90 <_fflush_r>
    1956:	2800      	cmp	r0, #0
    1958:	d012      	beq.n	1980 <__swbuf_r+0x9c>
    195a:	e00f      	b.n	197c <__swbuf_r+0x98>
    195c:	4b0a      	ldr	r3, [pc, #40]	; (1988 <__swbuf_r+0xa4>)
    195e:	429c      	cmp	r4, r3
    1960:	d101      	bne.n	1966 <__swbuf_r+0x82>
    1962:	68ac      	ldr	r4, [r5, #8]
    1964:	e7cd      	b.n	1902 <__swbuf_r+0x1e>
    1966:	4b09      	ldr	r3, [pc, #36]	; (198c <__swbuf_r+0xa8>)
    1968:	429c      	cmp	r4, r3
    196a:	d1ca      	bne.n	1902 <__swbuf_r+0x1e>
    196c:	68ec      	ldr	r4, [r5, #12]
    196e:	e7c8      	b.n	1902 <__swbuf_r+0x1e>
    1970:	0021      	movs	r1, r4
    1972:	0028      	movs	r0, r5
    1974:	f000 f80c 	bl	1990 <__swsetup_r>
    1978:	2800      	cmp	r0, #0
    197a:	d0ca      	beq.n	1912 <__swbuf_r+0x2e>
    197c:	2601      	movs	r6, #1
    197e:	4276      	negs	r6, r6
    1980:	0030      	movs	r0, r6
    1982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1984:	00002214 	.word	0x00002214
    1988:	00002234 	.word	0x00002234
    198c:	000021f4 	.word	0x000021f4

00001990 <__swsetup_r>:
    1990:	4b36      	ldr	r3, [pc, #216]	; (1a6c <__swsetup_r+0xdc>)
    1992:	b570      	push	{r4, r5, r6, lr}
    1994:	681d      	ldr	r5, [r3, #0]
    1996:	0006      	movs	r6, r0
    1998:	000c      	movs	r4, r1
    199a:	2d00      	cmp	r5, #0
    199c:	d005      	beq.n	19aa <__swsetup_r+0x1a>
    199e:	69ab      	ldr	r3, [r5, #24]
    19a0:	2b00      	cmp	r3, #0
    19a2:	d102      	bne.n	19aa <__swsetup_r+0x1a>
    19a4:	0028      	movs	r0, r5
    19a6:	f000 f961 	bl	1c6c <__sinit>
    19aa:	4b31      	ldr	r3, [pc, #196]	; (1a70 <__swsetup_r+0xe0>)
    19ac:	429c      	cmp	r4, r3
    19ae:	d10f      	bne.n	19d0 <__swsetup_r+0x40>
    19b0:	686c      	ldr	r4, [r5, #4]
    19b2:	230c      	movs	r3, #12
    19b4:	5ee2      	ldrsh	r2, [r4, r3]
    19b6:	b293      	uxth	r3, r2
    19b8:	0719      	lsls	r1, r3, #28
    19ba:	d42d      	bmi.n	1a18 <__swsetup_r+0x88>
    19bc:	06d9      	lsls	r1, r3, #27
    19be:	d411      	bmi.n	19e4 <__swsetup_r+0x54>
    19c0:	2309      	movs	r3, #9
    19c2:	2001      	movs	r0, #1
    19c4:	6033      	str	r3, [r6, #0]
    19c6:	3337      	adds	r3, #55	; 0x37
    19c8:	4313      	orrs	r3, r2
    19ca:	81a3      	strh	r3, [r4, #12]
    19cc:	4240      	negs	r0, r0
    19ce:	bd70      	pop	{r4, r5, r6, pc}
    19d0:	4b28      	ldr	r3, [pc, #160]	; (1a74 <__swsetup_r+0xe4>)
    19d2:	429c      	cmp	r4, r3
    19d4:	d101      	bne.n	19da <__swsetup_r+0x4a>
    19d6:	68ac      	ldr	r4, [r5, #8]
    19d8:	e7eb      	b.n	19b2 <__swsetup_r+0x22>
    19da:	4b27      	ldr	r3, [pc, #156]	; (1a78 <__swsetup_r+0xe8>)
    19dc:	429c      	cmp	r4, r3
    19de:	d1e8      	bne.n	19b2 <__swsetup_r+0x22>
    19e0:	68ec      	ldr	r4, [r5, #12]
    19e2:	e7e6      	b.n	19b2 <__swsetup_r+0x22>
    19e4:	075b      	lsls	r3, r3, #29
    19e6:	d513      	bpl.n	1a10 <__swsetup_r+0x80>
    19e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
    19ea:	2900      	cmp	r1, #0
    19ec:	d008      	beq.n	1a00 <__swsetup_r+0x70>
    19ee:	0023      	movs	r3, r4
    19f0:	3344      	adds	r3, #68	; 0x44
    19f2:	4299      	cmp	r1, r3
    19f4:	d002      	beq.n	19fc <__swsetup_r+0x6c>
    19f6:	0030      	movs	r0, r6
    19f8:	f000 fa44 	bl	1e84 <_free_r>
    19fc:	2300      	movs	r3, #0
    19fe:	6363      	str	r3, [r4, #52]	; 0x34
    1a00:	2224      	movs	r2, #36	; 0x24
    1a02:	89a3      	ldrh	r3, [r4, #12]
    1a04:	4393      	bics	r3, r2
    1a06:	81a3      	strh	r3, [r4, #12]
    1a08:	2300      	movs	r3, #0
    1a0a:	6063      	str	r3, [r4, #4]
    1a0c:	6923      	ldr	r3, [r4, #16]
    1a0e:	6023      	str	r3, [r4, #0]
    1a10:	2308      	movs	r3, #8
    1a12:	89a2      	ldrh	r2, [r4, #12]
    1a14:	4313      	orrs	r3, r2
    1a16:	81a3      	strh	r3, [r4, #12]
    1a18:	6923      	ldr	r3, [r4, #16]
    1a1a:	2b00      	cmp	r3, #0
    1a1c:	d10b      	bne.n	1a36 <__swsetup_r+0xa6>
    1a1e:	21a0      	movs	r1, #160	; 0xa0
    1a20:	2280      	movs	r2, #128	; 0x80
    1a22:	89a3      	ldrh	r3, [r4, #12]
    1a24:	0089      	lsls	r1, r1, #2
    1a26:	0092      	lsls	r2, r2, #2
    1a28:	400b      	ands	r3, r1
    1a2a:	4293      	cmp	r3, r2
    1a2c:	d003      	beq.n	1a36 <__swsetup_r+0xa6>
    1a2e:	0021      	movs	r1, r4
    1a30:	0030      	movs	r0, r6
    1a32:	f000 f9d9 	bl	1de8 <__smakebuf_r>
    1a36:	2301      	movs	r3, #1
    1a38:	89a2      	ldrh	r2, [r4, #12]
    1a3a:	4013      	ands	r3, r2
    1a3c:	d011      	beq.n	1a62 <__swsetup_r+0xd2>
    1a3e:	2300      	movs	r3, #0
    1a40:	60a3      	str	r3, [r4, #8]
    1a42:	6963      	ldr	r3, [r4, #20]
    1a44:	425b      	negs	r3, r3
    1a46:	61a3      	str	r3, [r4, #24]
    1a48:	2000      	movs	r0, #0
    1a4a:	6923      	ldr	r3, [r4, #16]
    1a4c:	4283      	cmp	r3, r0
    1a4e:	d1be      	bne.n	19ce <__swsetup_r+0x3e>
    1a50:	230c      	movs	r3, #12
    1a52:	5ee2      	ldrsh	r2, [r4, r3]
    1a54:	0613      	lsls	r3, r2, #24
    1a56:	d5ba      	bpl.n	19ce <__swsetup_r+0x3e>
    1a58:	2340      	movs	r3, #64	; 0x40
    1a5a:	4313      	orrs	r3, r2
    1a5c:	81a3      	strh	r3, [r4, #12]
    1a5e:	3801      	subs	r0, #1
    1a60:	e7b5      	b.n	19ce <__swsetup_r+0x3e>
    1a62:	0792      	lsls	r2, r2, #30
    1a64:	d400      	bmi.n	1a68 <__swsetup_r+0xd8>
    1a66:	6963      	ldr	r3, [r4, #20]
    1a68:	60a3      	str	r3, [r4, #8]
    1a6a:	e7ed      	b.n	1a48 <__swsetup_r+0xb8>
    1a6c:	20000004 	.word	0x20000004
    1a70:	00002214 	.word	0x00002214
    1a74:	00002234 	.word	0x00002234
    1a78:	000021f4 	.word	0x000021f4

00001a7c <__sflush_r>:
    1a7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1a7e:	898a      	ldrh	r2, [r1, #12]
    1a80:	0005      	movs	r5, r0
    1a82:	000c      	movs	r4, r1
    1a84:	0713      	lsls	r3, r2, #28
    1a86:	d460      	bmi.n	1b4a <__sflush_r+0xce>
    1a88:	684b      	ldr	r3, [r1, #4]
    1a8a:	2b00      	cmp	r3, #0
    1a8c:	dc04      	bgt.n	1a98 <__sflush_r+0x1c>
    1a8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
    1a90:	2b00      	cmp	r3, #0
    1a92:	dc01      	bgt.n	1a98 <__sflush_r+0x1c>
    1a94:	2000      	movs	r0, #0
    1a96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1a98:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1a9a:	2f00      	cmp	r7, #0
    1a9c:	d0fa      	beq.n	1a94 <__sflush_r+0x18>
    1a9e:	2300      	movs	r3, #0
    1aa0:	682e      	ldr	r6, [r5, #0]
    1aa2:	602b      	str	r3, [r5, #0]
    1aa4:	2380      	movs	r3, #128	; 0x80
    1aa6:	015b      	lsls	r3, r3, #5
    1aa8:	401a      	ands	r2, r3
    1aaa:	d034      	beq.n	1b16 <__sflush_r+0x9a>
    1aac:	6d60      	ldr	r0, [r4, #84]	; 0x54
    1aae:	89a3      	ldrh	r3, [r4, #12]
    1ab0:	075b      	lsls	r3, r3, #29
    1ab2:	d506      	bpl.n	1ac2 <__sflush_r+0x46>
    1ab4:	6863      	ldr	r3, [r4, #4]
    1ab6:	1ac0      	subs	r0, r0, r3
    1ab8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    1aba:	2b00      	cmp	r3, #0
    1abc:	d001      	beq.n	1ac2 <__sflush_r+0x46>
    1abe:	6c23      	ldr	r3, [r4, #64]	; 0x40
    1ac0:	1ac0      	subs	r0, r0, r3
    1ac2:	0002      	movs	r2, r0
    1ac4:	6a21      	ldr	r1, [r4, #32]
    1ac6:	2300      	movs	r3, #0
    1ac8:	0028      	movs	r0, r5
    1aca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
    1acc:	47b8      	blx	r7
    1ace:	89a1      	ldrh	r1, [r4, #12]
    1ad0:	1c43      	adds	r3, r0, #1
    1ad2:	d106      	bne.n	1ae2 <__sflush_r+0x66>
    1ad4:	682b      	ldr	r3, [r5, #0]
    1ad6:	2b1d      	cmp	r3, #29
    1ad8:	d831      	bhi.n	1b3e <__sflush_r+0xc2>
    1ada:	4a2c      	ldr	r2, [pc, #176]	; (1b8c <__sflush_r+0x110>)
    1adc:	40da      	lsrs	r2, r3
    1ade:	07d3      	lsls	r3, r2, #31
    1ae0:	d52d      	bpl.n	1b3e <__sflush_r+0xc2>
    1ae2:	2300      	movs	r3, #0
    1ae4:	6063      	str	r3, [r4, #4]
    1ae6:	6923      	ldr	r3, [r4, #16]
    1ae8:	6023      	str	r3, [r4, #0]
    1aea:	04cb      	lsls	r3, r1, #19
    1aec:	d505      	bpl.n	1afa <__sflush_r+0x7e>
    1aee:	1c43      	adds	r3, r0, #1
    1af0:	d102      	bne.n	1af8 <__sflush_r+0x7c>
    1af2:	682b      	ldr	r3, [r5, #0]
    1af4:	2b00      	cmp	r3, #0
    1af6:	d100      	bne.n	1afa <__sflush_r+0x7e>
    1af8:	6560      	str	r0, [r4, #84]	; 0x54
    1afa:	6b61      	ldr	r1, [r4, #52]	; 0x34
    1afc:	602e      	str	r6, [r5, #0]
    1afe:	2900      	cmp	r1, #0
    1b00:	d0c8      	beq.n	1a94 <__sflush_r+0x18>
    1b02:	0023      	movs	r3, r4
    1b04:	3344      	adds	r3, #68	; 0x44
    1b06:	4299      	cmp	r1, r3
    1b08:	d002      	beq.n	1b10 <__sflush_r+0x94>
    1b0a:	0028      	movs	r0, r5
    1b0c:	f000 f9ba 	bl	1e84 <_free_r>
    1b10:	2000      	movs	r0, #0
    1b12:	6360      	str	r0, [r4, #52]	; 0x34
    1b14:	e7bf      	b.n	1a96 <__sflush_r+0x1a>
    1b16:	2301      	movs	r3, #1
    1b18:	6a21      	ldr	r1, [r4, #32]
    1b1a:	0028      	movs	r0, r5
    1b1c:	47b8      	blx	r7
    1b1e:	1c43      	adds	r3, r0, #1
    1b20:	d1c5      	bne.n	1aae <__sflush_r+0x32>
    1b22:	682b      	ldr	r3, [r5, #0]
    1b24:	2b00      	cmp	r3, #0
    1b26:	d0c2      	beq.n	1aae <__sflush_r+0x32>
    1b28:	2b1d      	cmp	r3, #29
    1b2a:	d001      	beq.n	1b30 <__sflush_r+0xb4>
    1b2c:	2b16      	cmp	r3, #22
    1b2e:	d101      	bne.n	1b34 <__sflush_r+0xb8>
    1b30:	602e      	str	r6, [r5, #0]
    1b32:	e7af      	b.n	1a94 <__sflush_r+0x18>
    1b34:	2340      	movs	r3, #64	; 0x40
    1b36:	89a2      	ldrh	r2, [r4, #12]
    1b38:	4313      	orrs	r3, r2
    1b3a:	81a3      	strh	r3, [r4, #12]
    1b3c:	e7ab      	b.n	1a96 <__sflush_r+0x1a>
    1b3e:	2340      	movs	r3, #64	; 0x40
    1b40:	430b      	orrs	r3, r1
    1b42:	2001      	movs	r0, #1
    1b44:	81a3      	strh	r3, [r4, #12]
    1b46:	4240      	negs	r0, r0
    1b48:	e7a5      	b.n	1a96 <__sflush_r+0x1a>
    1b4a:	690f      	ldr	r7, [r1, #16]
    1b4c:	2f00      	cmp	r7, #0
    1b4e:	d0a1      	beq.n	1a94 <__sflush_r+0x18>
    1b50:	680b      	ldr	r3, [r1, #0]
    1b52:	600f      	str	r7, [r1, #0]
    1b54:	1bdb      	subs	r3, r3, r7
    1b56:	9301      	str	r3, [sp, #4]
    1b58:	2300      	movs	r3, #0
    1b5a:	0792      	lsls	r2, r2, #30
    1b5c:	d100      	bne.n	1b60 <__sflush_r+0xe4>
    1b5e:	694b      	ldr	r3, [r1, #20]
    1b60:	60a3      	str	r3, [r4, #8]
    1b62:	9b01      	ldr	r3, [sp, #4]
    1b64:	2b00      	cmp	r3, #0
    1b66:	dc00      	bgt.n	1b6a <__sflush_r+0xee>
    1b68:	e794      	b.n	1a94 <__sflush_r+0x18>
    1b6a:	9b01      	ldr	r3, [sp, #4]
    1b6c:	003a      	movs	r2, r7
    1b6e:	6a21      	ldr	r1, [r4, #32]
    1b70:	0028      	movs	r0, r5
    1b72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
    1b74:	47b0      	blx	r6
    1b76:	2800      	cmp	r0, #0
    1b78:	dc03      	bgt.n	1b82 <__sflush_r+0x106>
    1b7a:	2340      	movs	r3, #64	; 0x40
    1b7c:	89a2      	ldrh	r2, [r4, #12]
    1b7e:	4313      	orrs	r3, r2
    1b80:	e7df      	b.n	1b42 <__sflush_r+0xc6>
    1b82:	9b01      	ldr	r3, [sp, #4]
    1b84:	183f      	adds	r7, r7, r0
    1b86:	1a1b      	subs	r3, r3, r0
    1b88:	9301      	str	r3, [sp, #4]
    1b8a:	e7ea      	b.n	1b62 <__sflush_r+0xe6>
    1b8c:	20400001 	.word	0x20400001

00001b90 <_fflush_r>:
    1b90:	690b      	ldr	r3, [r1, #16]
    1b92:	b570      	push	{r4, r5, r6, lr}
    1b94:	0005      	movs	r5, r0
    1b96:	000c      	movs	r4, r1
    1b98:	2b00      	cmp	r3, #0
    1b9a:	d101      	bne.n	1ba0 <_fflush_r+0x10>
    1b9c:	2000      	movs	r0, #0
    1b9e:	bd70      	pop	{r4, r5, r6, pc}
    1ba0:	2800      	cmp	r0, #0
    1ba2:	d004      	beq.n	1bae <_fflush_r+0x1e>
    1ba4:	6983      	ldr	r3, [r0, #24]
    1ba6:	2b00      	cmp	r3, #0
    1ba8:	d101      	bne.n	1bae <_fflush_r+0x1e>
    1baa:	f000 f85f 	bl	1c6c <__sinit>
    1bae:	4b0b      	ldr	r3, [pc, #44]	; (1bdc <_fflush_r+0x4c>)
    1bb0:	429c      	cmp	r4, r3
    1bb2:	d109      	bne.n	1bc8 <_fflush_r+0x38>
    1bb4:	686c      	ldr	r4, [r5, #4]
    1bb6:	220c      	movs	r2, #12
    1bb8:	5ea3      	ldrsh	r3, [r4, r2]
    1bba:	2b00      	cmp	r3, #0
    1bbc:	d0ee      	beq.n	1b9c <_fflush_r+0xc>
    1bbe:	0021      	movs	r1, r4
    1bc0:	0028      	movs	r0, r5
    1bc2:	f7ff ff5b 	bl	1a7c <__sflush_r>
    1bc6:	e7ea      	b.n	1b9e <_fflush_r+0xe>
    1bc8:	4b05      	ldr	r3, [pc, #20]	; (1be0 <_fflush_r+0x50>)
    1bca:	429c      	cmp	r4, r3
    1bcc:	d101      	bne.n	1bd2 <_fflush_r+0x42>
    1bce:	68ac      	ldr	r4, [r5, #8]
    1bd0:	e7f1      	b.n	1bb6 <_fflush_r+0x26>
    1bd2:	4b04      	ldr	r3, [pc, #16]	; (1be4 <_fflush_r+0x54>)
    1bd4:	429c      	cmp	r4, r3
    1bd6:	d1ee      	bne.n	1bb6 <_fflush_r+0x26>
    1bd8:	68ec      	ldr	r4, [r5, #12]
    1bda:	e7ec      	b.n	1bb6 <_fflush_r+0x26>
    1bdc:	00002214 	.word	0x00002214
    1be0:	00002234 	.word	0x00002234
    1be4:	000021f4 	.word	0x000021f4

00001be8 <_cleanup_r>:
    1be8:	b510      	push	{r4, lr}
    1bea:	4902      	ldr	r1, [pc, #8]	; (1bf4 <_cleanup_r+0xc>)
    1bec:	f000 f8b2 	bl	1d54 <_fwalk_reent>
    1bf0:	bd10      	pop	{r4, pc}
    1bf2:	46c0      	nop			; (mov r8, r8)
    1bf4:	00001b91 	.word	0x00001b91

00001bf8 <std.isra.0>:
    1bf8:	2300      	movs	r3, #0
    1bfa:	b510      	push	{r4, lr}
    1bfc:	0004      	movs	r4, r0
    1bfe:	6003      	str	r3, [r0, #0]
    1c00:	6043      	str	r3, [r0, #4]
    1c02:	6083      	str	r3, [r0, #8]
    1c04:	8181      	strh	r1, [r0, #12]
    1c06:	6643      	str	r3, [r0, #100]	; 0x64
    1c08:	81c2      	strh	r2, [r0, #14]
    1c0a:	6103      	str	r3, [r0, #16]
    1c0c:	6143      	str	r3, [r0, #20]
    1c0e:	6183      	str	r3, [r0, #24]
    1c10:	0019      	movs	r1, r3
    1c12:	2208      	movs	r2, #8
    1c14:	305c      	adds	r0, #92	; 0x5c
    1c16:	f7ff fd3d 	bl	1694 <memset>
    1c1a:	4b05      	ldr	r3, [pc, #20]	; (1c30 <std.isra.0+0x38>)
    1c1c:	6224      	str	r4, [r4, #32]
    1c1e:	6263      	str	r3, [r4, #36]	; 0x24
    1c20:	4b04      	ldr	r3, [pc, #16]	; (1c34 <std.isra.0+0x3c>)
    1c22:	62a3      	str	r3, [r4, #40]	; 0x28
    1c24:	4b04      	ldr	r3, [pc, #16]	; (1c38 <std.isra.0+0x40>)
    1c26:	62e3      	str	r3, [r4, #44]	; 0x2c
    1c28:	4b04      	ldr	r3, [pc, #16]	; (1c3c <std.isra.0+0x44>)
    1c2a:	6323      	str	r3, [r4, #48]	; 0x30
    1c2c:	bd10      	pop	{r4, pc}
    1c2e:	46c0      	nop			; (mov r8, r8)
    1c30:	00001ff9 	.word	0x00001ff9
    1c34:	00002021 	.word	0x00002021
    1c38:	00002059 	.word	0x00002059
    1c3c:	00002085 	.word	0x00002085

00001c40 <__sfmoreglue>:
    1c40:	b570      	push	{r4, r5, r6, lr}
    1c42:	2568      	movs	r5, #104	; 0x68
    1c44:	1e4a      	subs	r2, r1, #1
    1c46:	4355      	muls	r5, r2
    1c48:	000e      	movs	r6, r1
    1c4a:	0029      	movs	r1, r5
    1c4c:	3174      	adds	r1, #116	; 0x74
    1c4e:	f000 f963 	bl	1f18 <_malloc_r>
    1c52:	1e04      	subs	r4, r0, #0
    1c54:	d008      	beq.n	1c68 <__sfmoreglue+0x28>
    1c56:	2100      	movs	r1, #0
    1c58:	002a      	movs	r2, r5
    1c5a:	6001      	str	r1, [r0, #0]
    1c5c:	6046      	str	r6, [r0, #4]
    1c5e:	300c      	adds	r0, #12
    1c60:	60a0      	str	r0, [r4, #8]
    1c62:	3268      	adds	r2, #104	; 0x68
    1c64:	f7ff fd16 	bl	1694 <memset>
    1c68:	0020      	movs	r0, r4
    1c6a:	bd70      	pop	{r4, r5, r6, pc}

00001c6c <__sinit>:
    1c6c:	6983      	ldr	r3, [r0, #24]
    1c6e:	b513      	push	{r0, r1, r4, lr}
    1c70:	0004      	movs	r4, r0
    1c72:	2b00      	cmp	r3, #0
    1c74:	d128      	bne.n	1cc8 <__sinit+0x5c>
    1c76:	6483      	str	r3, [r0, #72]	; 0x48
    1c78:	64c3      	str	r3, [r0, #76]	; 0x4c
    1c7a:	6503      	str	r3, [r0, #80]	; 0x50
    1c7c:	4b13      	ldr	r3, [pc, #76]	; (1ccc <__sinit+0x60>)
    1c7e:	4a14      	ldr	r2, [pc, #80]	; (1cd0 <__sinit+0x64>)
    1c80:	681b      	ldr	r3, [r3, #0]
    1c82:	6282      	str	r2, [r0, #40]	; 0x28
    1c84:	9301      	str	r3, [sp, #4]
    1c86:	4298      	cmp	r0, r3
    1c88:	d101      	bne.n	1c8e <__sinit+0x22>
    1c8a:	2301      	movs	r3, #1
    1c8c:	6183      	str	r3, [r0, #24]
    1c8e:	0020      	movs	r0, r4
    1c90:	f000 f820 	bl	1cd4 <__sfp>
    1c94:	6060      	str	r0, [r4, #4]
    1c96:	0020      	movs	r0, r4
    1c98:	f000 f81c 	bl	1cd4 <__sfp>
    1c9c:	60a0      	str	r0, [r4, #8]
    1c9e:	0020      	movs	r0, r4
    1ca0:	f000 f818 	bl	1cd4 <__sfp>
    1ca4:	2200      	movs	r2, #0
    1ca6:	60e0      	str	r0, [r4, #12]
    1ca8:	2104      	movs	r1, #4
    1caa:	6860      	ldr	r0, [r4, #4]
    1cac:	f7ff ffa4 	bl	1bf8 <std.isra.0>
    1cb0:	2201      	movs	r2, #1
    1cb2:	2109      	movs	r1, #9
    1cb4:	68a0      	ldr	r0, [r4, #8]
    1cb6:	f7ff ff9f 	bl	1bf8 <std.isra.0>
    1cba:	2202      	movs	r2, #2
    1cbc:	2112      	movs	r1, #18
    1cbe:	68e0      	ldr	r0, [r4, #12]
    1cc0:	f7ff ff9a 	bl	1bf8 <std.isra.0>
    1cc4:	2301      	movs	r3, #1
    1cc6:	61a3      	str	r3, [r4, #24]
    1cc8:	bd13      	pop	{r0, r1, r4, pc}
    1cca:	46c0      	nop			; (mov r8, r8)
    1ccc:	000021f0 	.word	0x000021f0
    1cd0:	00001be9 	.word	0x00001be9

00001cd4 <__sfp>:
    1cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1cd6:	4b1e      	ldr	r3, [pc, #120]	; (1d50 <__sfp+0x7c>)
    1cd8:	0007      	movs	r7, r0
    1cda:	681e      	ldr	r6, [r3, #0]
    1cdc:	69b3      	ldr	r3, [r6, #24]
    1cde:	2b00      	cmp	r3, #0
    1ce0:	d102      	bne.n	1ce8 <__sfp+0x14>
    1ce2:	0030      	movs	r0, r6
    1ce4:	f7ff ffc2 	bl	1c6c <__sinit>
    1ce8:	3648      	adds	r6, #72	; 0x48
    1cea:	68b4      	ldr	r4, [r6, #8]
    1cec:	6873      	ldr	r3, [r6, #4]
    1cee:	3b01      	subs	r3, #1
    1cf0:	d504      	bpl.n	1cfc <__sfp+0x28>
    1cf2:	6833      	ldr	r3, [r6, #0]
    1cf4:	2b00      	cmp	r3, #0
    1cf6:	d007      	beq.n	1d08 <__sfp+0x34>
    1cf8:	6836      	ldr	r6, [r6, #0]
    1cfa:	e7f6      	b.n	1cea <__sfp+0x16>
    1cfc:	220c      	movs	r2, #12
    1cfe:	5ea5      	ldrsh	r5, [r4, r2]
    1d00:	2d00      	cmp	r5, #0
    1d02:	d00d      	beq.n	1d20 <__sfp+0x4c>
    1d04:	3468      	adds	r4, #104	; 0x68
    1d06:	e7f2      	b.n	1cee <__sfp+0x1a>
    1d08:	2104      	movs	r1, #4
    1d0a:	0038      	movs	r0, r7
    1d0c:	f7ff ff98 	bl	1c40 <__sfmoreglue>
    1d10:	6030      	str	r0, [r6, #0]
    1d12:	2800      	cmp	r0, #0
    1d14:	d1f0      	bne.n	1cf8 <__sfp+0x24>
    1d16:	230c      	movs	r3, #12
    1d18:	0004      	movs	r4, r0
    1d1a:	603b      	str	r3, [r7, #0]
    1d1c:	0020      	movs	r0, r4
    1d1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1d20:	2301      	movs	r3, #1
    1d22:	0020      	movs	r0, r4
    1d24:	425b      	negs	r3, r3
    1d26:	81e3      	strh	r3, [r4, #14]
    1d28:	3302      	adds	r3, #2
    1d2a:	81a3      	strh	r3, [r4, #12]
    1d2c:	6665      	str	r5, [r4, #100]	; 0x64
    1d2e:	6025      	str	r5, [r4, #0]
    1d30:	60a5      	str	r5, [r4, #8]
    1d32:	6065      	str	r5, [r4, #4]
    1d34:	6125      	str	r5, [r4, #16]
    1d36:	6165      	str	r5, [r4, #20]
    1d38:	61a5      	str	r5, [r4, #24]
    1d3a:	2208      	movs	r2, #8
    1d3c:	0029      	movs	r1, r5
    1d3e:	305c      	adds	r0, #92	; 0x5c
    1d40:	f7ff fca8 	bl	1694 <memset>
    1d44:	6365      	str	r5, [r4, #52]	; 0x34
    1d46:	63a5      	str	r5, [r4, #56]	; 0x38
    1d48:	64a5      	str	r5, [r4, #72]	; 0x48
    1d4a:	64e5      	str	r5, [r4, #76]	; 0x4c
    1d4c:	e7e6      	b.n	1d1c <__sfp+0x48>
    1d4e:	46c0      	nop			; (mov r8, r8)
    1d50:	000021f0 	.word	0x000021f0

00001d54 <_fwalk_reent>:
    1d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1d56:	0004      	movs	r4, r0
    1d58:	0007      	movs	r7, r0
    1d5a:	2600      	movs	r6, #0
    1d5c:	9101      	str	r1, [sp, #4]
    1d5e:	3448      	adds	r4, #72	; 0x48
    1d60:	2c00      	cmp	r4, #0
    1d62:	d101      	bne.n	1d68 <_fwalk_reent+0x14>
    1d64:	0030      	movs	r0, r6
    1d66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    1d68:	6863      	ldr	r3, [r4, #4]
    1d6a:	68a5      	ldr	r5, [r4, #8]
    1d6c:	9300      	str	r3, [sp, #0]
    1d6e:	9b00      	ldr	r3, [sp, #0]
    1d70:	3b01      	subs	r3, #1
    1d72:	9300      	str	r3, [sp, #0]
    1d74:	d501      	bpl.n	1d7a <_fwalk_reent+0x26>
    1d76:	6824      	ldr	r4, [r4, #0]
    1d78:	e7f2      	b.n	1d60 <_fwalk_reent+0xc>
    1d7a:	89ab      	ldrh	r3, [r5, #12]
    1d7c:	2b01      	cmp	r3, #1
    1d7e:	d908      	bls.n	1d92 <_fwalk_reent+0x3e>
    1d80:	220e      	movs	r2, #14
    1d82:	5eab      	ldrsh	r3, [r5, r2]
    1d84:	3301      	adds	r3, #1
    1d86:	d004      	beq.n	1d92 <_fwalk_reent+0x3e>
    1d88:	0029      	movs	r1, r5
    1d8a:	0038      	movs	r0, r7
    1d8c:	9b01      	ldr	r3, [sp, #4]
    1d8e:	4798      	blx	r3
    1d90:	4306      	orrs	r6, r0
    1d92:	3568      	adds	r5, #104	; 0x68
    1d94:	e7eb      	b.n	1d6e <_fwalk_reent+0x1a>
	...

00001d98 <__swhatbuf_r>:
    1d98:	b570      	push	{r4, r5, r6, lr}
    1d9a:	000e      	movs	r6, r1
    1d9c:	001d      	movs	r5, r3
    1d9e:	230e      	movs	r3, #14
    1da0:	5ec9      	ldrsh	r1, [r1, r3]
    1da2:	b090      	sub	sp, #64	; 0x40
    1da4:	0014      	movs	r4, r2
    1da6:	2900      	cmp	r1, #0
    1da8:	da07      	bge.n	1dba <__swhatbuf_r+0x22>
    1daa:	2300      	movs	r3, #0
    1dac:	602b      	str	r3, [r5, #0]
    1dae:	89b3      	ldrh	r3, [r6, #12]
    1db0:	061b      	lsls	r3, r3, #24
    1db2:	d411      	bmi.n	1dd8 <__swhatbuf_r+0x40>
    1db4:	2380      	movs	r3, #128	; 0x80
    1db6:	00db      	lsls	r3, r3, #3
    1db8:	e00f      	b.n	1dda <__swhatbuf_r+0x42>
    1dba:	aa01      	add	r2, sp, #4
    1dbc:	f000 f98e 	bl	20dc <_fstat_r>
    1dc0:	2800      	cmp	r0, #0
    1dc2:	dbf2      	blt.n	1daa <__swhatbuf_r+0x12>
    1dc4:	22f0      	movs	r2, #240	; 0xf0
    1dc6:	9b02      	ldr	r3, [sp, #8]
    1dc8:	0212      	lsls	r2, r2, #8
    1dca:	4013      	ands	r3, r2
    1dcc:	4a05      	ldr	r2, [pc, #20]	; (1de4 <__swhatbuf_r+0x4c>)
    1dce:	189b      	adds	r3, r3, r2
    1dd0:	425a      	negs	r2, r3
    1dd2:	4153      	adcs	r3, r2
    1dd4:	602b      	str	r3, [r5, #0]
    1dd6:	e7ed      	b.n	1db4 <__swhatbuf_r+0x1c>
    1dd8:	2340      	movs	r3, #64	; 0x40
    1dda:	2000      	movs	r0, #0
    1ddc:	6023      	str	r3, [r4, #0]
    1dde:	b010      	add	sp, #64	; 0x40
    1de0:	bd70      	pop	{r4, r5, r6, pc}
    1de2:	46c0      	nop			; (mov r8, r8)
    1de4:	ffffe000 	.word	0xffffe000

00001de8 <__smakebuf_r>:
    1de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    1dea:	2602      	movs	r6, #2
    1dec:	898b      	ldrh	r3, [r1, #12]
    1dee:	0005      	movs	r5, r0
    1df0:	000c      	movs	r4, r1
    1df2:	4233      	tst	r3, r6
    1df4:	d006      	beq.n	1e04 <__smakebuf_r+0x1c>
    1df6:	0023      	movs	r3, r4
    1df8:	3347      	adds	r3, #71	; 0x47
    1dfa:	6023      	str	r3, [r4, #0]
    1dfc:	6123      	str	r3, [r4, #16]
    1dfe:	2301      	movs	r3, #1
    1e00:	6163      	str	r3, [r4, #20]
    1e02:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    1e04:	ab01      	add	r3, sp, #4
    1e06:	466a      	mov	r2, sp
    1e08:	f7ff ffc6 	bl	1d98 <__swhatbuf_r>
    1e0c:	9900      	ldr	r1, [sp, #0]
    1e0e:	0007      	movs	r7, r0
    1e10:	0028      	movs	r0, r5
    1e12:	f000 f881 	bl	1f18 <_malloc_r>
    1e16:	2800      	cmp	r0, #0
    1e18:	d108      	bne.n	1e2c <__smakebuf_r+0x44>
    1e1a:	220c      	movs	r2, #12
    1e1c:	5ea3      	ldrsh	r3, [r4, r2]
    1e1e:	059a      	lsls	r2, r3, #22
    1e20:	d4ef      	bmi.n	1e02 <__smakebuf_r+0x1a>
    1e22:	2203      	movs	r2, #3
    1e24:	4393      	bics	r3, r2
    1e26:	431e      	orrs	r6, r3
    1e28:	81a6      	strh	r6, [r4, #12]
    1e2a:	e7e4      	b.n	1df6 <__smakebuf_r+0xe>
    1e2c:	4b0f      	ldr	r3, [pc, #60]	; (1e6c <__smakebuf_r+0x84>)
    1e2e:	62ab      	str	r3, [r5, #40]	; 0x28
    1e30:	2380      	movs	r3, #128	; 0x80
    1e32:	89a2      	ldrh	r2, [r4, #12]
    1e34:	6020      	str	r0, [r4, #0]
    1e36:	4313      	orrs	r3, r2
    1e38:	81a3      	strh	r3, [r4, #12]
    1e3a:	9b00      	ldr	r3, [sp, #0]
    1e3c:	6120      	str	r0, [r4, #16]
    1e3e:	6163      	str	r3, [r4, #20]
    1e40:	9b01      	ldr	r3, [sp, #4]
    1e42:	2b00      	cmp	r3, #0
    1e44:	d00d      	beq.n	1e62 <__smakebuf_r+0x7a>
    1e46:	230e      	movs	r3, #14
    1e48:	5ee1      	ldrsh	r1, [r4, r3]
    1e4a:	0028      	movs	r0, r5
    1e4c:	f000 f958 	bl	2100 <_isatty_r>
    1e50:	2800      	cmp	r0, #0
    1e52:	d006      	beq.n	1e62 <__smakebuf_r+0x7a>
    1e54:	2203      	movs	r2, #3
    1e56:	89a3      	ldrh	r3, [r4, #12]
    1e58:	4393      	bics	r3, r2
    1e5a:	001a      	movs	r2, r3
    1e5c:	2301      	movs	r3, #1
    1e5e:	4313      	orrs	r3, r2
    1e60:	81a3      	strh	r3, [r4, #12]
    1e62:	89a0      	ldrh	r0, [r4, #12]
    1e64:	4338      	orrs	r0, r7
    1e66:	81a0      	strh	r0, [r4, #12]
    1e68:	e7cb      	b.n	1e02 <__smakebuf_r+0x1a>
    1e6a:	46c0      	nop			; (mov r8, r8)
    1e6c:	00001be9 	.word	0x00001be9

00001e70 <malloc>:
    1e70:	b510      	push	{r4, lr}
    1e72:	4b03      	ldr	r3, [pc, #12]	; (1e80 <malloc+0x10>)
    1e74:	0001      	movs	r1, r0
    1e76:	6818      	ldr	r0, [r3, #0]
    1e78:	f000 f84e 	bl	1f18 <_malloc_r>
    1e7c:	bd10      	pop	{r4, pc}
    1e7e:	46c0      	nop			; (mov r8, r8)
    1e80:	20000004 	.word	0x20000004

00001e84 <_free_r>:
    1e84:	b570      	push	{r4, r5, r6, lr}
    1e86:	0005      	movs	r5, r0
    1e88:	2900      	cmp	r1, #0
    1e8a:	d010      	beq.n	1eae <_free_r+0x2a>
    1e8c:	1f0c      	subs	r4, r1, #4
    1e8e:	6823      	ldr	r3, [r4, #0]
    1e90:	2b00      	cmp	r3, #0
    1e92:	da00      	bge.n	1e96 <_free_r+0x12>
    1e94:	18e4      	adds	r4, r4, r3
    1e96:	0028      	movs	r0, r5
    1e98:	f000 f958 	bl	214c <__malloc_lock>
    1e9c:	4a1d      	ldr	r2, [pc, #116]	; (1f14 <_free_r+0x90>)
    1e9e:	6813      	ldr	r3, [r2, #0]
    1ea0:	2b00      	cmp	r3, #0
    1ea2:	d105      	bne.n	1eb0 <_free_r+0x2c>
    1ea4:	6063      	str	r3, [r4, #4]
    1ea6:	6014      	str	r4, [r2, #0]
    1ea8:	0028      	movs	r0, r5
    1eaa:	f000 f950 	bl	214e <__malloc_unlock>
    1eae:	bd70      	pop	{r4, r5, r6, pc}
    1eb0:	42a3      	cmp	r3, r4
    1eb2:	d909      	bls.n	1ec8 <_free_r+0x44>
    1eb4:	6821      	ldr	r1, [r4, #0]
    1eb6:	1860      	adds	r0, r4, r1
    1eb8:	4283      	cmp	r3, r0
    1eba:	d1f3      	bne.n	1ea4 <_free_r+0x20>
    1ebc:	6818      	ldr	r0, [r3, #0]
    1ebe:	685b      	ldr	r3, [r3, #4]
    1ec0:	1841      	adds	r1, r0, r1
    1ec2:	6021      	str	r1, [r4, #0]
    1ec4:	e7ee      	b.n	1ea4 <_free_r+0x20>
    1ec6:	0013      	movs	r3, r2
    1ec8:	685a      	ldr	r2, [r3, #4]
    1eca:	2a00      	cmp	r2, #0
    1ecc:	d001      	beq.n	1ed2 <_free_r+0x4e>
    1ece:	42a2      	cmp	r2, r4
    1ed0:	d9f9      	bls.n	1ec6 <_free_r+0x42>
    1ed2:	6819      	ldr	r1, [r3, #0]
    1ed4:	1858      	adds	r0, r3, r1
    1ed6:	42a0      	cmp	r0, r4
    1ed8:	d10b      	bne.n	1ef2 <_free_r+0x6e>
    1eda:	6820      	ldr	r0, [r4, #0]
    1edc:	1809      	adds	r1, r1, r0
    1ede:	1858      	adds	r0, r3, r1
    1ee0:	6019      	str	r1, [r3, #0]
    1ee2:	4282      	cmp	r2, r0
    1ee4:	d1e0      	bne.n	1ea8 <_free_r+0x24>
    1ee6:	6810      	ldr	r0, [r2, #0]
    1ee8:	6852      	ldr	r2, [r2, #4]
    1eea:	1841      	adds	r1, r0, r1
    1eec:	6019      	str	r1, [r3, #0]
    1eee:	605a      	str	r2, [r3, #4]
    1ef0:	e7da      	b.n	1ea8 <_free_r+0x24>
    1ef2:	42a0      	cmp	r0, r4
    1ef4:	d902      	bls.n	1efc <_free_r+0x78>
    1ef6:	230c      	movs	r3, #12
    1ef8:	602b      	str	r3, [r5, #0]
    1efa:	e7d5      	b.n	1ea8 <_free_r+0x24>
    1efc:	6821      	ldr	r1, [r4, #0]
    1efe:	1860      	adds	r0, r4, r1
    1f00:	4282      	cmp	r2, r0
    1f02:	d103      	bne.n	1f0c <_free_r+0x88>
    1f04:	6810      	ldr	r0, [r2, #0]
    1f06:	6852      	ldr	r2, [r2, #4]
    1f08:	1841      	adds	r1, r0, r1
    1f0a:	6021      	str	r1, [r4, #0]
    1f0c:	6062      	str	r2, [r4, #4]
    1f0e:	605c      	str	r4, [r3, #4]
    1f10:	e7ca      	b.n	1ea8 <_free_r+0x24>
    1f12:	46c0      	nop			; (mov r8, r8)
    1f14:	200000c4 	.word	0x200000c4

00001f18 <_malloc_r>:
    1f18:	2303      	movs	r3, #3
    1f1a:	b570      	push	{r4, r5, r6, lr}
    1f1c:	1ccd      	adds	r5, r1, #3
    1f1e:	439d      	bics	r5, r3
    1f20:	3508      	adds	r5, #8
    1f22:	0006      	movs	r6, r0
    1f24:	2d0c      	cmp	r5, #12
    1f26:	d21e      	bcs.n	1f66 <_malloc_r+0x4e>
    1f28:	250c      	movs	r5, #12
    1f2a:	42a9      	cmp	r1, r5
    1f2c:	d81d      	bhi.n	1f6a <_malloc_r+0x52>
    1f2e:	0030      	movs	r0, r6
    1f30:	f000 f90c 	bl	214c <__malloc_lock>
    1f34:	4a25      	ldr	r2, [pc, #148]	; (1fcc <_malloc_r+0xb4>)
    1f36:	6814      	ldr	r4, [r2, #0]
    1f38:	0021      	movs	r1, r4
    1f3a:	2900      	cmp	r1, #0
    1f3c:	d119      	bne.n	1f72 <_malloc_r+0x5a>
    1f3e:	4c24      	ldr	r4, [pc, #144]	; (1fd0 <_malloc_r+0xb8>)
    1f40:	6823      	ldr	r3, [r4, #0]
    1f42:	2b00      	cmp	r3, #0
    1f44:	d103      	bne.n	1f4e <_malloc_r+0x36>
    1f46:	0030      	movs	r0, r6
    1f48:	f000 f844 	bl	1fd4 <_sbrk_r>
    1f4c:	6020      	str	r0, [r4, #0]
    1f4e:	0029      	movs	r1, r5
    1f50:	0030      	movs	r0, r6
    1f52:	f000 f83f 	bl	1fd4 <_sbrk_r>
    1f56:	1c43      	adds	r3, r0, #1
    1f58:	d12c      	bne.n	1fb4 <_malloc_r+0x9c>
    1f5a:	230c      	movs	r3, #12
    1f5c:	0030      	movs	r0, r6
    1f5e:	6033      	str	r3, [r6, #0]
    1f60:	f000 f8f5 	bl	214e <__malloc_unlock>
    1f64:	e003      	b.n	1f6e <_malloc_r+0x56>
    1f66:	2d00      	cmp	r5, #0
    1f68:	dadf      	bge.n	1f2a <_malloc_r+0x12>
    1f6a:	230c      	movs	r3, #12
    1f6c:	6033      	str	r3, [r6, #0]
    1f6e:	2000      	movs	r0, #0
    1f70:	bd70      	pop	{r4, r5, r6, pc}
    1f72:	680b      	ldr	r3, [r1, #0]
    1f74:	1b5b      	subs	r3, r3, r5
    1f76:	d41a      	bmi.n	1fae <_malloc_r+0x96>
    1f78:	2b0b      	cmp	r3, #11
    1f7a:	d903      	bls.n	1f84 <_malloc_r+0x6c>
    1f7c:	600b      	str	r3, [r1, #0]
    1f7e:	18cc      	adds	r4, r1, r3
    1f80:	6025      	str	r5, [r4, #0]
    1f82:	e003      	b.n	1f8c <_malloc_r+0x74>
    1f84:	428c      	cmp	r4, r1
    1f86:	d10e      	bne.n	1fa6 <_malloc_r+0x8e>
    1f88:	6863      	ldr	r3, [r4, #4]
    1f8a:	6013      	str	r3, [r2, #0]
    1f8c:	0030      	movs	r0, r6
    1f8e:	f000 f8de 	bl	214e <__malloc_unlock>
    1f92:	0020      	movs	r0, r4
    1f94:	2207      	movs	r2, #7
    1f96:	300b      	adds	r0, #11
    1f98:	1d23      	adds	r3, r4, #4
    1f9a:	4390      	bics	r0, r2
    1f9c:	1ac3      	subs	r3, r0, r3
    1f9e:	d0e7      	beq.n	1f70 <_malloc_r+0x58>
    1fa0:	425a      	negs	r2, r3
    1fa2:	50e2      	str	r2, [r4, r3]
    1fa4:	e7e4      	b.n	1f70 <_malloc_r+0x58>
    1fa6:	684b      	ldr	r3, [r1, #4]
    1fa8:	6063      	str	r3, [r4, #4]
    1faa:	000c      	movs	r4, r1
    1fac:	e7ee      	b.n	1f8c <_malloc_r+0x74>
    1fae:	000c      	movs	r4, r1
    1fb0:	6849      	ldr	r1, [r1, #4]
    1fb2:	e7c2      	b.n	1f3a <_malloc_r+0x22>
    1fb4:	2303      	movs	r3, #3
    1fb6:	1cc4      	adds	r4, r0, #3
    1fb8:	439c      	bics	r4, r3
    1fba:	42a0      	cmp	r0, r4
    1fbc:	d0e0      	beq.n	1f80 <_malloc_r+0x68>
    1fbe:	1a21      	subs	r1, r4, r0
    1fc0:	0030      	movs	r0, r6
    1fc2:	f000 f807 	bl	1fd4 <_sbrk_r>
    1fc6:	1c43      	adds	r3, r0, #1
    1fc8:	d1da      	bne.n	1f80 <_malloc_r+0x68>
    1fca:	e7c6      	b.n	1f5a <_malloc_r+0x42>
    1fcc:	200000c4 	.word	0x200000c4
    1fd0:	200000c8 	.word	0x200000c8

00001fd4 <_sbrk_r>:
    1fd4:	2300      	movs	r3, #0
    1fd6:	b570      	push	{r4, r5, r6, lr}
    1fd8:	4c06      	ldr	r4, [pc, #24]	; (1ff4 <_sbrk_r+0x20>)
    1fda:	0005      	movs	r5, r0
    1fdc:	0008      	movs	r0, r1
    1fde:	6023      	str	r3, [r4, #0]
    1fe0:	f7ff f9a4 	bl	132c <_sbrk>
    1fe4:	1c43      	adds	r3, r0, #1
    1fe6:	d103      	bne.n	1ff0 <_sbrk_r+0x1c>
    1fe8:	6823      	ldr	r3, [r4, #0]
    1fea:	2b00      	cmp	r3, #0
    1fec:	d000      	beq.n	1ff0 <_sbrk_r+0x1c>
    1fee:	602b      	str	r3, [r5, #0]
    1ff0:	bd70      	pop	{r4, r5, r6, pc}
    1ff2:	46c0      	nop			; (mov r8, r8)
    1ff4:	20000164 	.word	0x20000164

00001ff8 <__sread>:
    1ff8:	b570      	push	{r4, r5, r6, lr}
    1ffa:	000c      	movs	r4, r1
    1ffc:	250e      	movs	r5, #14
    1ffe:	5f49      	ldrsh	r1, [r1, r5]
    2000:	f000 f8a6 	bl	2150 <_read_r>
    2004:	2800      	cmp	r0, #0
    2006:	db03      	blt.n	2010 <STACK_SIZE+0x10>
    2008:	6d63      	ldr	r3, [r4, #84]	; 0x54
    200a:	181b      	adds	r3, r3, r0
    200c:	6563      	str	r3, [r4, #84]	; 0x54
    200e:	bd70      	pop	{r4, r5, r6, pc}
    2010:	89a3      	ldrh	r3, [r4, #12]
    2012:	4a02      	ldr	r2, [pc, #8]	; (201c <STACK_SIZE+0x1c>)
    2014:	4013      	ands	r3, r2
    2016:	81a3      	strh	r3, [r4, #12]
    2018:	e7f9      	b.n	200e <STACK_SIZE+0xe>
    201a:	46c0      	nop			; (mov r8, r8)
    201c:	ffffefff 	.word	0xffffefff

00002020 <__swrite>:
    2020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2022:	001f      	movs	r7, r3
    2024:	898b      	ldrh	r3, [r1, #12]
    2026:	0005      	movs	r5, r0
    2028:	000c      	movs	r4, r1
    202a:	0016      	movs	r6, r2
    202c:	05db      	lsls	r3, r3, #23
    202e:	d505      	bpl.n	203c <__swrite+0x1c>
    2030:	230e      	movs	r3, #14
    2032:	5ec9      	ldrsh	r1, [r1, r3]
    2034:	2200      	movs	r2, #0
    2036:	2302      	movs	r3, #2
    2038:	f000 f874 	bl	2124 <_lseek_r>
    203c:	89a3      	ldrh	r3, [r4, #12]
    203e:	4a05      	ldr	r2, [pc, #20]	; (2054 <__swrite+0x34>)
    2040:	0028      	movs	r0, r5
    2042:	4013      	ands	r3, r2
    2044:	81a3      	strh	r3, [r4, #12]
    2046:	0032      	movs	r2, r6
    2048:	230e      	movs	r3, #14
    204a:	5ee1      	ldrsh	r1, [r4, r3]
    204c:	003b      	movs	r3, r7
    204e:	f000 f81f 	bl	2090 <_write_r>
    2052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2054:	ffffefff 	.word	0xffffefff

00002058 <__sseek>:
    2058:	b570      	push	{r4, r5, r6, lr}
    205a:	000c      	movs	r4, r1
    205c:	250e      	movs	r5, #14
    205e:	5f49      	ldrsh	r1, [r1, r5]
    2060:	f000 f860 	bl	2124 <_lseek_r>
    2064:	89a3      	ldrh	r3, [r4, #12]
    2066:	1c42      	adds	r2, r0, #1
    2068:	d103      	bne.n	2072 <__sseek+0x1a>
    206a:	4a05      	ldr	r2, [pc, #20]	; (2080 <__sseek+0x28>)
    206c:	4013      	ands	r3, r2
    206e:	81a3      	strh	r3, [r4, #12]
    2070:	bd70      	pop	{r4, r5, r6, pc}
    2072:	2280      	movs	r2, #128	; 0x80
    2074:	0152      	lsls	r2, r2, #5
    2076:	4313      	orrs	r3, r2
    2078:	81a3      	strh	r3, [r4, #12]
    207a:	6560      	str	r0, [r4, #84]	; 0x54
    207c:	e7f8      	b.n	2070 <__sseek+0x18>
    207e:	46c0      	nop			; (mov r8, r8)
    2080:	ffffefff 	.word	0xffffefff

00002084 <__sclose>:
    2084:	b510      	push	{r4, lr}
    2086:	230e      	movs	r3, #14
    2088:	5ec9      	ldrsh	r1, [r1, r3]
    208a:	f000 f815 	bl	20b8 <_close_r>
    208e:	bd10      	pop	{r4, pc}

00002090 <_write_r>:
    2090:	b570      	push	{r4, r5, r6, lr}
    2092:	0005      	movs	r5, r0
    2094:	0008      	movs	r0, r1
    2096:	0011      	movs	r1, r2
    2098:	2200      	movs	r2, #0
    209a:	4c06      	ldr	r4, [pc, #24]	; (20b4 <_write_r+0x24>)
    209c:	6022      	str	r2, [r4, #0]
    209e:	001a      	movs	r2, r3
    20a0:	f7fe fa54 	bl	54c <_write>
    20a4:	1c43      	adds	r3, r0, #1
    20a6:	d103      	bne.n	20b0 <_write_r+0x20>
    20a8:	6823      	ldr	r3, [r4, #0]
    20aa:	2b00      	cmp	r3, #0
    20ac:	d000      	beq.n	20b0 <_write_r+0x20>
    20ae:	602b      	str	r3, [r5, #0]
    20b0:	bd70      	pop	{r4, r5, r6, pc}
    20b2:	46c0      	nop			; (mov r8, r8)
    20b4:	20000164 	.word	0x20000164

000020b8 <_close_r>:
    20b8:	2300      	movs	r3, #0
    20ba:	b570      	push	{r4, r5, r6, lr}
    20bc:	4c06      	ldr	r4, [pc, #24]	; (20d8 <_close_r+0x20>)
    20be:	0005      	movs	r5, r0
    20c0:	0008      	movs	r0, r1
    20c2:	6023      	str	r3, [r4, #0]
    20c4:	f7ff f944 	bl	1350 <_close>
    20c8:	1c43      	adds	r3, r0, #1
    20ca:	d103      	bne.n	20d4 <_close_r+0x1c>
    20cc:	6823      	ldr	r3, [r4, #0]
    20ce:	2b00      	cmp	r3, #0
    20d0:	d000      	beq.n	20d4 <_close_r+0x1c>
    20d2:	602b      	str	r3, [r5, #0]
    20d4:	bd70      	pop	{r4, r5, r6, pc}
    20d6:	46c0      	nop			; (mov r8, r8)
    20d8:	20000164 	.word	0x20000164

000020dc <_fstat_r>:
    20dc:	2300      	movs	r3, #0
    20de:	b570      	push	{r4, r5, r6, lr}
    20e0:	4c06      	ldr	r4, [pc, #24]	; (20fc <_fstat_r+0x20>)
    20e2:	0005      	movs	r5, r0
    20e4:	0008      	movs	r0, r1
    20e6:	0011      	movs	r1, r2
    20e8:	6023      	str	r3, [r4, #0]
    20ea:	f7ff f934 	bl	1356 <_fstat>
    20ee:	1c43      	adds	r3, r0, #1
    20f0:	d103      	bne.n	20fa <_fstat_r+0x1e>
    20f2:	6823      	ldr	r3, [r4, #0]
    20f4:	2b00      	cmp	r3, #0
    20f6:	d000      	beq.n	20fa <_fstat_r+0x1e>
    20f8:	602b      	str	r3, [r5, #0]
    20fa:	bd70      	pop	{r4, r5, r6, pc}
    20fc:	20000164 	.word	0x20000164

00002100 <_isatty_r>:
    2100:	2300      	movs	r3, #0
    2102:	b570      	push	{r4, r5, r6, lr}
    2104:	4c06      	ldr	r4, [pc, #24]	; (2120 <_isatty_r+0x20>)
    2106:	0005      	movs	r5, r0
    2108:	0008      	movs	r0, r1
    210a:	6023      	str	r3, [r4, #0]
    210c:	f7ff f928 	bl	1360 <_isatty>
    2110:	1c43      	adds	r3, r0, #1
    2112:	d103      	bne.n	211c <_isatty_r+0x1c>
    2114:	6823      	ldr	r3, [r4, #0]
    2116:	2b00      	cmp	r3, #0
    2118:	d000      	beq.n	211c <_isatty_r+0x1c>
    211a:	602b      	str	r3, [r5, #0]
    211c:	bd70      	pop	{r4, r5, r6, pc}
    211e:	46c0      	nop			; (mov r8, r8)
    2120:	20000164 	.word	0x20000164

00002124 <_lseek_r>:
    2124:	b570      	push	{r4, r5, r6, lr}
    2126:	0005      	movs	r5, r0
    2128:	0008      	movs	r0, r1
    212a:	0011      	movs	r1, r2
    212c:	2200      	movs	r2, #0
    212e:	4c06      	ldr	r4, [pc, #24]	; (2148 <_lseek_r+0x24>)
    2130:	6022      	str	r2, [r4, #0]
    2132:	001a      	movs	r2, r3
    2134:	f7ff f916 	bl	1364 <_lseek>
    2138:	1c43      	adds	r3, r0, #1
    213a:	d103      	bne.n	2144 <_lseek_r+0x20>
    213c:	6823      	ldr	r3, [r4, #0]
    213e:	2b00      	cmp	r3, #0
    2140:	d000      	beq.n	2144 <_lseek_r+0x20>
    2142:	602b      	str	r3, [r5, #0]
    2144:	bd70      	pop	{r4, r5, r6, pc}
    2146:	46c0      	nop			; (mov r8, r8)
    2148:	20000164 	.word	0x20000164

0000214c <__malloc_lock>:
    214c:	4770      	bx	lr

0000214e <__malloc_unlock>:
    214e:	4770      	bx	lr

00002150 <_read_r>:
    2150:	b570      	push	{r4, r5, r6, lr}
    2152:	0005      	movs	r5, r0
    2154:	0008      	movs	r0, r1
    2156:	0011      	movs	r1, r2
    2158:	2200      	movs	r2, #0
    215a:	4c06      	ldr	r4, [pc, #24]	; (2174 <_read_r+0x24>)
    215c:	6022      	str	r2, [r4, #0]
    215e:	001a      	movs	r2, r3
    2160:	f7fe f9d2 	bl	508 <_read>
    2164:	1c43      	adds	r3, r0, #1
    2166:	d103      	bne.n	2170 <_read_r+0x20>
    2168:	6823      	ldr	r3, [r4, #0]
    216a:	2b00      	cmp	r3, #0
    216c:	d000      	beq.n	2170 <_read_r+0x20>
    216e:	602b      	str	r3, [r5, #0]
    2170:	bd70      	pop	{r4, r5, r6, pc}
    2172:	46c0      	nop			; (mov r8, r8)
    2174:	20000164 	.word	0x20000164
    2178:	42000800 	.word	0x42000800
    217c:	42000c00 	.word	0x42000c00
    2180:	42001000 	.word	0x42001000
    2184:	42001400 	.word	0x42001400
    2188:	42001800 	.word	0x42001800
    218c:	42001c00 	.word	0x42001c00
    2190:	00000cba 	.word	0x00000cba
    2194:	00000cb6 	.word	0x00000cb6
    2198:	00000cb6 	.word	0x00000cb6
    219c:	00000d18 	.word	0x00000d18
    21a0:	00000d18 	.word	0x00000d18
    21a4:	00000cce 	.word	0x00000cce
    21a8:	00000cc0 	.word	0x00000cc0
    21ac:	00000cd4 	.word	0x00000cd4
    21b0:	00000d06 	.word	0x00000d06
    21b4:	00000da0 	.word	0x00000da0
    21b8:	00000d80 	.word	0x00000d80
    21bc:	00000d80 	.word	0x00000d80
    21c0:	00000e0c 	.word	0x00000e0c
    21c4:	00000d92 	.word	0x00000d92
    21c8:	00000dae 	.word	0x00000dae
    21cc:	00000d84 	.word	0x00000d84
    21d0:	00000dbc 	.word	0x00000dbc
    21d4:	00000dfc 	.word	0x00000dfc
    21d8:	5420694f 	.word	0x5420694f
    21dc:	616d7275 	.word	0x616d7275
    21e0:	0d212120 	.word	0x0d212120
    21e4:	00000000 	.word	0x00000000
    21e8:	2044454c 	.word	0x2044454c
    21ec:	000d4e4f 	.word	0x000d4e4f

000021f0 <_global_impure_ptr>:
    21f0:	20000008                                ... 

000021f4 <__sf_fake_stderr>:
	...

00002214 <__sf_fake_stdin>:
	...

00002234 <__sf_fake_stdout>:
	...

00002254 <_init>:
    2254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2256:	46c0      	nop			; (mov r8, r8)
    2258:	bcf8      	pop	{r3, r4, r5, r6, r7}
    225a:	bc08      	pop	{r3}
    225c:	469e      	mov	lr, r3
    225e:	4770      	bx	lr

00002260 <__init_array_start>:
    2260:	000000dd 	.word	0x000000dd

00002264 <_fini>:
    2264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2266:	46c0      	nop			; (mov r8, r8)
    2268:	bcf8      	pop	{r3, r4, r5, r6, r7}
    226a:	bc08      	pop	{r3}
    226c:	469e      	mov	lr, r3
    226e:	4770      	bx	lr

00002270 <__fini_array_start>:
    2270:	000000b5 	.word	0x000000b5
